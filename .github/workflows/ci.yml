name: 🔍 CI - Tests et Validation

on:
  push:
    branches: [ main, develop, swing ]
  pull_request:
    branches: [ main, develop, swing ]

jobs:
  test:
    name: 🧪 Tests Multi-OS
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java-version: [21]

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Configuration Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Information système
        run: |
          echo "=== Système ==="
          echo "OS: ${{ matrix.os }}"
          echo "Java: ${{ matrix.java-version }}"
          echo ""
          echo "=== Versions ==="
          java -version
          mvn --version

      - name: 🧪 Compilation et tests
        run: mvn clean compile test

      - name: 📦 Build des JARs
        run: mvn clean package -DskipTests

      - name: 🔍 Vérification des artefacts
        shell: bash
        run: |
          echo "=== JARs générés ==="
          find target/ -name "*.jar" -type f -exec ls -lh {} \;
          
          echo ""
          echo "=== Vérification de la structure du JAR principal ==="
          JAR_FILE=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
          if [ -n "$JAR_FILE" ]; then
            echo "JAR trouvé: $JAR_FILE"
            java -jar "$JAR_FILE" --help 2>/dev/null || echo "Mode headless OK"
          else
            echo "❌ JAR avec dépendances non trouvé"
            exit 1
          fi

      - name: 📊 Upload des artefacts de build
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: jar-artifacts
          path: |
            target/*.jar
            run.bat
            run.sh
          retention-days: 30

  security-scan:
    name: 🔐 Scan de Sécurité
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Configuration Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🔍 Scan des vulnérabilités Maven
        run: mvn org.owasp:dependency-check-maven:check

      - name: 📊 Upload du rapport de sécurité
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: target/dependency-check-report.html
          retention-days: 30

  code-quality:
    name: 📏 Qualité du Code
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Configuration Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📊 Analyse de qualité avec SpotBugs
        run: mvn compile spotbugs:spotbugs

      - name: 📊 Upload du rapport SpotBugs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-report
          path: target/spotbugsXml.xml
          retention-days: 30

  validate-scripts:
    name: 🔧 Validation des Scripts
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🔍 Validation du script Bash
        run: |
          if [ -f "run.sh" ]; then
            echo "✅ run.sh trouvé"
            # Vérifier la syntaxe bash
            bash -n run.sh
            echo "✅ Syntaxe run.sh valide"
          else
            echo "❌ run.sh manquant"
            exit 1
          fi

      - name: 🔍 Validation du script Batch (syntaxe de base)
        run: |
          if [ -f "run.bat" ]; then
            echo "✅ run.bat trouvé"
            # Vérifications de base pour le script batch
            if grep -q "mvn" run.bat; then
              echo "✅ Script batch contient les commandes Maven"
            else
              echo "❌ Script batch ne contient pas les commandes Maven"
              exit 1
            fi
          else
            echo "❌ run.bat manquant"
            exit 1
          fi

  performance-test:
    name: ⚡ Tests de Performance
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Configuration Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📦 Build optimisé
        run: mvn clean package -DskipTests -Dmaven.compiler.optimize=true

      - name: ⚡ Test de démarrage et consommation mémoire
        run: |
          echo "=== Test de performance de démarrage ==="
          JAR_FILE=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
          
          if [ -n "$JAR_FILE" ]; then
            echo "Test avec: $JAR_FILE"
            echo "Taille du JAR: $(du -sh "$JAR_FILE")"
          
            # Test de démarrage en mode headless avec timeout
            echo "Test de démarrage (10s max)..."
            timeout 10s java -Djava.awt.headless=true -Xmx128m -jar "$JAR_FILE" || echo "✅ Démarrage OK (timeout attendu)"
          
            echo "✅ Tests de performance terminés"
          else
            echo "❌ JAR non trouvé pour les tests de performance"
            exit 1
          fi

  integration-test:
    name: 🔗 Tests d'Intégration
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: ☕ Configuration Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📦 Build du projet
        run: mvn clean package -DskipTests

      - name: 🌐 Test de connectivité aux APIs
        run: |
          echo "=== Test de connectivité aux APIs de traduction ==="
          
          # Test MyMemory API
          echo "Test MyMemory API..."
          curl -f "https://api.mymemory.translated.net/get?q=hello&langpair=en|fr" || echo "⚠️ MyMemory API inaccessible"
          
          # Test Google Translate API
          echo "Test Google Translate API..."
          curl -f "https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=fr&dt=t&q=hello" || echo "⚠️ Google Translate API inaccessible"
          
          # Test OCR.space API
          echo "Test OCR.space API..."
          curl -f "https://api.ocr.space/" || echo "⚠️ OCR.space API inaccessible"
          
          echo "✅ Tests de connectivité terminés"

      - name: 📁 Test de création des dossiers
        run: |
          echo "=== Test de création du dossier logs ==="
          JAR_FILE=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
          
          if [ -n "$JAR_FILE" ]; then
            # Lancer l'app en mode headless pour 5 secondes
            timeout 5s java -Djava.awt.headless=true -jar "$JAR_FILE" || true
          
            # Vérifier si le dossier logs est créé
            if [ -d "logs" ]; then
              echo "✅ Dossier logs créé automatiquement"
              ls -la logs/ || echo "Dossier logs vide (normal)"
            else
              echo "⚠️ Dossier logs non créé (peut être normal en mode headless)"
            fi
          fi
