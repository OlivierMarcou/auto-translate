name: üöÄ Release Automatique

on:
  push:
    tags:
      - 'v*'  # Se d√©clenche sur les tags v1.0.0, v2.1.3, etc.

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    name: üèóÔ∏è Build et Release Multi-Platform
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour avoir l'historique complet

      - name: ‚òï Configuration Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: üîç V√©rification de la version Maven
        run: mvn --version

      - name: üß™ Ex√©cution des tests (optionnel)
        run: mvn clean test || echo "‚ö†Ô∏è Tests √©chou√©s ou absents, continuer quand m√™me"
        continue-on-error: true

      - name: üì¶ Build du projet (JAR avec d√©pendances)
        run: mvn clean package -DskipTests

      - name: üîç V√©rification des artefacts g√©n√©r√©s
        run: |
          echo "=== Contenu du dossier target ==="
          ls -la target/
          echo ""
          echo "=== Recherche des JARs ==="
          find target/ -name "*.jar" -type f
          echo ""
          echo "=== Tailles des JARs ==="
          find target/ -name "*.jar" -type f -exec ls -lh {} \;

      - name: üè∑Ô∏è Extraction du nom de la version depuis le tag
        id: get_version
        run: |
          # Extraire la version du tag (v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version d√©tect√©e: $VERSION"
          
          # Valider le format de version
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Format de version non standard: $VERSION"
            echo "Recommand√©: v1.0.0, v2.1.3, etc."
          fi

      - name: üìù G√©n√©ration des notes de version
        id: generate_changelog
        run: |
          # R√©cup√©rer le tag pr√©c√©dent
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## üöÄ Nouveaut√©s dans cette version" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### üìã Commits depuis $PREV_TAG:" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### üì¶ Fichiers inclus dans cette release:" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar** - Application compl√®te avec toutes les d√©pendances" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar** - Version optimis√©e" >> $GITHUB_OUTPUT
            echo "- **run.bat** - Script de lancement Windows" >> $GITHUB_OUTPUT
            echo "- **run.sh** - Script de lancement Linux/Mac" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### üõ†Ô∏è Installation:" >> $GITHUB_OUTPUT
            echo "\`\`\`bash" >> $GITHUB_OUTPUT
            echo "# T√©l√©charger le JAR principal" >> $GITHUB_OUTPUT
            echo "wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "# Lancer l'application" >> $GITHUB_OUTPUT
            echo "java -jar traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ‚ö° Pr√©requis:" >> $GITHUB_OUTPUT
            echo "- Java 21 ou sup√©rieur" >> $GITHUB_OUTPUT
            echo "- Connexion Internet (pour les traductions)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## üéâ Premi√®re release de l'application !" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ‚ú® Fonctionnalit√©s principales:" >> $GITHUB_OUTPUT
            echo "- üåê Traduction automatique avec APIs MyMemory + Google Translate" >> $GITHUB_OUTPUT
            echo "- üì∑ Capture d'√©cran OCR multi-moniteurs" >> $GITHUB_OUTPUT
            echo "- üé® 25+ th√®mes modernes avec FlatLaf" >> $GITHUB_OUTPUT
            echo "- üìã Surveillance intelligente du presse-papiers" >> $GITHUB_OUTPUT
            echo "- üõ°Ô∏è Filtres de s√©curit√© avanc√©s" >> $GITHUB_OUTPUT
            echo "- üìä Logging automatique en CSV" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### üõ†Ô∏è Installation:" >> $GITHUB_OUTPUT
            echo "\`\`\`bash" >> $GITHUB_OUTPUT
            echo "java -jar traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ‚ö° Pr√©requis:" >> $GITHUB_OUTPUT
            echo "- Java 21 ou sup√©rieur" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: üè∑Ô∏è Renommage des artefacts avec version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          echo "=== Renommage des artefacts pour la version $VERSION ==="
          
          # Trouver et renommer le JAR principal (avec d√©pendances)
          JAR_WITH_DEPS=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
          if [ -n "$JAR_WITH_DEPS" ] && [ -f "$JAR_WITH_DEPS" ]; then
            NEW_NAME="target/traducteur-automatique-${VERSION}.jar"
            mv "$JAR_WITH_DEPS" "$NEW_NAME"
            echo "‚úÖ JAR principal renomm√©: $NEW_NAME"
          else
            echo "‚ö†Ô∏è JAR avec d√©pendances non trouv√©"
          fi
          
          # Trouver et renommer le JAR shaded
          JAR_SHADED=$(find target/ -name "*shaded.jar" -type f | head -1)
          if [ -n "$JAR_SHADED" ] && [ -f "$JAR_SHADED" ]; then
            NEW_SHADED="target/traducteur-automatique-${VERSION}-shaded.jar"
            mv "$JAR_SHADED" "$NEW_SHADED"
            echo "‚úÖ JAR shaded renomm√©: $NEW_SHADED"
          else
            echo "‚ö†Ô∏è JAR shaded non trouv√©, cr√©ation d'un lien symbolique"
            # Si pas de JAR shaded, cr√©er un lien vers le JAR principal
            if [ -f "target/traducteur-automatique-${VERSION}.jar" ]; then
              cp "target/traducteur-automatique-${VERSION}.jar" "target/traducteur-automatique-${VERSION}-shaded.jar"
              echo "‚úÖ JAR shaded cr√©√© par copie"
            fi
          fi
          
          # Cr√©er une archive avec les scripts
          echo "=== Cr√©ation de l'archive compl√®te ==="
          mkdir -p "release-${VERSION}"
          
          # Copier les JARs si ils existent
          [ -f "target/traducteur-automatique-${VERSION}.jar" ] && cp "target/traducteur-automatique-${VERSION}.jar" "release-${VERSION}/"
          [ -f "target/traducteur-automatique-${VERSION}-shaded.jar" ] && cp "target/traducteur-automatique-${VERSION}-shaded.jar" "release-${VERSION}/"
          
          # Copier les scripts et documentation
          cp run.bat "release-${VERSION}/" 2>/dev/null || echo "‚ö†Ô∏è run.bat non trouv√©"
          cp run.sh "release-${VERSION}/" 2>/dev/null || echo "‚ö†Ô∏è run.sh non trouv√©"
          cp README.md "release-${VERSION}/" 2>/dev/null || echo "‚ö†Ô∏è README.md non trouv√©"
          
          # Cr√©er l'archive ZIP
          cd "release-${VERSION}"
          zip -r "../target/traducteur-automatique-${VERSION}-complete.zip" .
          cd ..
          
          echo ""
          echo "=== Artefacts finaux ==="
          ls -la target/*.jar target/*.zip 2>/dev/null || echo "Aucun artefact trouv√©"
          
          echo ""
          echo "=== V√©rification de l'existence des fichiers pour la release ==="
          [ -f "target/traducteur-automatique-${VERSION}.jar" ] && echo "‚úÖ JAR principal: OK" || echo "‚ùå JAR principal: MANQUANT"
          [ -f "target/traducteur-automatique-${VERSION}-shaded.jar" ] && echo "‚úÖ JAR shaded: OK" || echo "‚ùå JAR shaded: MANQUANT"
          [ -f "target/traducteur-automatique-${VERSION}-complete.zip" ] && echo "‚úÖ Archive compl√®te: OK" || echo "‚ùå Archive compl√®te: MANQUANTE"

      - name: üîç V√©rification de l'existence de la release
        id: check_release
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v$VERSION"
          
          # V√©rifier si la release existe d√©j√†
          if gh release view "$TAG" &>/dev/null; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Release $TAG existe d√©j√†"
          
            # Demander ce qu'il faut faire via les inputs du workflow
            echo "OPTIONS:"
            echo "1. Mettre √† jour la release existante"
            echo "2. Supprimer et recr√©er la release"
            echo "3. √âchouer le build"
          
            # Par d√©faut, on met √† jour
            echo "ACTION=update" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Release $TAG n'existe pas, cr√©ation possible"
            echo "ACTION=create" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üóëÔ∏è Suppression de la release existante (si n√©cessaire)
        if: steps.check_release.outputs.RELEASE_EXISTS == 'true' && steps.check_release.outputs.ACTION == 'recreate'
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v$VERSION"
          
          echo "üóëÔ∏è Suppression de la release existante $TAG..."
          gh release delete "$TAG" --yes || echo "‚ö†Ô∏è Release d√©j√† supprim√©e"
          
          echo "‚úÖ Release $TAG supprim√©e, cr√©ation d'une nouvelle..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Cr√©ation/Mise √† jour de la Release GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: "üéâ Traducteur Automatique v${{ steps.get_version.outputs.VERSION }}"
          body: ${{ steps.generate_changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-complete.zip
            run.bat
            run.sh
            README.md
          fail_on_unmatched_files: false
          generate_release_notes: false
          make_latest: true
          append_body: false
          discussion_category_name: ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä R√©capitulatif de la release
        run: |
          echo "üéâ Release v${{ steps.get_version.outputs.VERSION }} cr√©√©e avec succ√®s !"
          echo ""
          echo "üì¶ Artefacts publi√©s:"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-complete.zip"
          echo "  - run.bat"
          echo "  - run.sh"
          echo "  - README.md"
          echo ""
          echo "üåê URL de la release:"
          echo "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"

  test-release:
    name: üß™ Test de la Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: üì• T√©l√©chargement de la release
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Test de t√©l√©chargement de la version $VERSION"
          
          # Attendre que la release soit disponible
          sleep 30
          
          # T√©l√©charger le JAR principal
          wget "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/traducteur-automatique-${VERSION}.jar" -O test-app.jar
          
          # V√©rifier que le fichier existe et n'est pas vide
          if [ -f "test-app.jar" ] && [ -s "test-app.jar" ]; then
            echo "‚úÖ JAR t√©l√©charg√© avec succ√®s"
            ls -lh test-app.jar
          else
            echo "‚ùå √âchec du t√©l√©chargement du JAR"
            exit 1
          fi

      - name: ‚òï Configuration Java pour le test
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üèÉ Test de lancement de l'application
        run: |
          echo "Test de lancement de l'application (mode headless)"
          timeout 10s java -Djava.awt.headless=true -jar test-app.jar || true
          echo "‚úÖ L'application se lance sans erreur critique"