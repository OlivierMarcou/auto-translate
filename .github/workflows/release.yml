name: 🚀 Release Automatique

on:
  push:
    tags:
      - 'v*'  # Se déclenche sur les tags v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    name: 🏗️ Build et Release Multi-Platform
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour avoir l'historique complet

      - name: ☕ Configuration Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Vérification de la version Maven
        run: mvn --version

      - name: 🧪 Exécution des tests
        run: mvn clean test
        continue-on-error: false

      - name: 📦 Build du projet (JAR avec dépendances)
        run: mvn clean package -DskipTests

      - name: 📦 Build du projet (JAR shaded)
        run: mvn clean package shade:shade -DskipTests

      - name: 🔍 Vérification des artefacts générés
        run: |
          echo "=== Contenu du dossier target ==="
          ls -la target/
          echo ""
          echo "=== Recherche des JARs ==="
          find target/ -name "*.jar" -type f
          echo ""
          echo "=== Tailles des JARs ==="
          find target/ -name "*.jar" -type f -exec ls -lh {} \;

      - name: 🏷️ Extraction du nom de la version depuis le tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version détectée: $VERSION"

      - name: 📝 Génération des notes de version
        id: generate_changelog
        run: |
          # Récupérer le tag précédent
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## 🚀 Nouveautés dans cette version" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📋 Commits depuis $PREV_TAG:" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📦 Fichiers inclus dans cette release:" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar** - Application complète avec toutes les dépendances" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar** - Version optimisée" >> $GITHUB_OUTPUT
            echo "- **run.bat** - Script de lancement Windows" >> $GITHUB_OUTPUT
            echo "- **run.sh** - Script de lancement Linux/Mac" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 🛠️ Installation:" >> $GITHUB_OUTPUT
            echo "\`\`\`bash" >> $GITHUB_OUTPUT
            echo "# Télécharger le JAR principal" >> $GITHUB_OUTPUT
            echo "wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "# Lancer l'application" >> $GITHUB_OUTPUT
            echo "java -jar traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ⚡ Prérequis:" >> $GITHUB_OUTPUT
            echo "- Java 21 ou supérieur" >> $GITHUB_OUTPUT
            echo "- Connexion Internet (pour les traductions)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Première release de l'application ! 🎉" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Renommage des artefacts avec version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # Renommer le JAR principal
          if [ -f "target/auto-translate-swing-1.0-SNAPSHOT-jar-with-dependencies.jar" ]; then
            mv "target/auto-translate-swing-1.0-SNAPSHOT-jar-with-dependencies.jar" "target/traducteur-automatique-${VERSION}.jar"
            echo "✅ JAR principal renommé"
          fi
          
          # Renommer le JAR shaded
          if [ -f "target/auto-translate-swing-1.0-SNAPSHOT-shaded.jar" ]; then
            mv "target/auto-translate-swing-1.0-SNAPSHOT-shaded.jar" "target/traducteur-automatique-${VERSION}-shaded.jar"
            echo "✅ JAR shaded renommé"
          fi
          
          # Créer une archive avec les scripts
          mkdir -p "release-${VERSION}"
          cp target/traducteur-automatique-${VERSION}.jar "release-${VERSION}/" 2>/dev/null || true
          cp target/traducteur-automatique-${VERSION}-shaded.jar "release-${VERSION}/" 2>/dev/null || true
          cp run.bat "release-${VERSION}/" 2>/dev/null || true
          cp run.sh "release-${VERSION}/" 2>/dev/null || true
          cp README.md "release-${VERSION}/" 2>/dev/null || true
          
          # Créer l'archive ZIP
          cd "release-${VERSION}"
          zip -r "../target/traducteur-automatique-${VERSION}-complete.zip" .
          cd ..
          
          echo "=== Artefacts finaux ==="
          ls -la target/*.jar target/*.zip

      - name: 🚀 Création de la Release GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "🎉 Traducteur Automatique v${{ steps.get_version.outputs.VERSION }}"
          body: ${{ steps.generate_changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar
            target/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-complete.zip
            run.bat
            run.sh
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Récapitulatif de la release
        run: |
          echo "🎉 Release v${{ steps.get_version.outputs.VERSION }} créée avec succès !"
          echo ""
          echo "📦 Artefacts publiés:"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-complete.zip"
          echo "  - run.bat"
          echo "  - run.sh"
          echo "  - README.md"
          echo ""
          echo "🌐 URL de la release:"
          echo "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"

  test-release:
    name: 🧪 Test de la Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: 📥 Téléchargement de la release
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Test de téléchargement de la version $VERSION"
          
          # Attendre que la release soit disponible
          sleep 30
          
          # Télécharger le JAR principal
          wget "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/traducteur-automatique-${VERSION}.jar" -O test-app.jar
          
          # Vérifier que le fichier existe et n'est pas vide
          if [ -f "test-app.jar" ] && [ -s "test-app.jar" ]; then
            echo "✅ JAR téléchargé avec succès"
            ls -lh test-app.jar
          else
            echo "❌ Échec du téléchargement du JAR"
            exit 1
          fi

      - name: ☕ Configuration Java pour le test
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🏃 Test de lancement de l'application
        run: |
          echo "Test de lancement de l'application (mode headless)"
          timeout 10s java -Djava.awt.headless=true -jar test-app.jar || true
          echo "✅ L'application se lance sans erreur critique"