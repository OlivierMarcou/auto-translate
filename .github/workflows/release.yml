name: 🚀 Release Automatique

on:
  push:
    tags:
      - 'v*'  # Se déclenche sur les tags v1.0.0, v2.1.3, etc.

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    name: 🏗️ Build et Release Multi-Platform
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour avoir l'historique complet

      - name: ☕ Configuration Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Vérification de la version Maven
        run: mvn --version

      - name: 🧪 Exécution des tests (optionnel)
        run: mvn clean test || echo "⚠️ Tests échoués ou absents, continuer quand même"
        continue-on-error: true

      - name: 📦 Build du projet (JAR avec dépendances)
        run: mvn clean package -DskipTests

      - name: 🔍 Vérification des artefacts générés
        run: |
          echo "=== Contenu du dossier target ==="
          ls -la target/
          echo ""
          echo "=== Recherche des JARs ==="
          find target/ -name "*.jar" -type f
          echo ""
          echo "=== Tailles des JARs ==="
          find target/ -name "*.jar" -type f -exec ls -lh {} \;

      - name: 🏷️ Extraction du nom de la version depuis le tag
        id: get_version
        run: |
          # Extraire la version du tag (v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version détectée: $VERSION"
          
          # Valider le format de version
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚠️ Format de version non standard: $VERSION"
            echo "Recommandé: v1.0.0, v2.1.3, etc."
          fi

      - name: 📝 Génération des notes de version
        id: generate_changelog
        run: |
          # Récupérer le tag précédent
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## 🚀 Nouveautés dans cette version" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📋 Commits depuis $PREV_TAG:" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📦 Fichiers inclus dans cette release:" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar** - Application complète avec toutes les dépendances" >> $GITHUB_OUTPUT
            echo "- **traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar** - Version optimisée" >> $GITHUB_OUTPUT
            echo "- **run.bat** - Script de lancement Windows" >> $GITHUB_OUTPUT
            echo "- **run.sh** - Script de lancement Linux/Mac" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 🛠️ Installation:" >> $GITHUB_OUTPUT
            echo "\`\`\`bash" >> $GITHUB_OUTPUT
            echo "# Télécharger le JAR principal" >> $GITHUB_OUTPUT
            echo "wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "# Lancer l'application" >> $GITHUB_OUTPUT
            echo "java -jar traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ⚡ Prérequis:" >> $GITHUB_OUTPUT
            echo "- Java 21 ou supérieur" >> $GITHUB_OUTPUT
            echo "- Connexion Internet (pour les traductions)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## 🎉 Première release de l'application !" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ✨ Fonctionnalités principales:" >> $GITHUB_OUTPUT
            echo "- 🌐 Traduction automatique avec APIs MyMemory + Google Translate" >> $GITHUB_OUTPUT
            echo "- 📷 Capture d'écran OCR multi-moniteurs" >> $GITHUB_OUTPUT
            echo "- 🎨 25+ thèmes modernes avec FlatLaf" >> $GITHUB_OUTPUT
            echo "- 📋 Surveillance intelligente du presse-papiers" >> $GITHUB_OUTPUT
            echo "- 🛡️ Filtres de sécurité avancés" >> $GITHUB_OUTPUT
            echo "- 📊 Logging automatique en CSV" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 🛠️ Installation:" >> $GITHUB_OUTPUT
            echo "\`\`\`bash" >> $GITHUB_OUTPUT
            echo "java -jar traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar" >> $GITHUB_OUTPUT
            echo "\`\`\`" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### ⚡ Prérequis:" >> $GITHUB_OUTPUT
            echo "- Java 21 ou supérieur" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Renommage des artefacts avec version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          echo "=== Renommage des artefacts pour la version $VERSION ==="
          
          # Trouver et renommer le JAR principal (avec dépendances)
          JAR_WITH_DEPS=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
          if [ -n "$JAR_WITH_DEPS" ] && [ -f "$JAR_WITH_DEPS" ]; then
            NEW_NAME="target/traducteur-automatique-${VERSION}.jar"
            mv "$JAR_WITH_DEPS" "$NEW_NAME"
            echo "✅ JAR principal renommé: $NEW_NAME"
          else
            echo "⚠️ JAR avec dépendances non trouvé"
          fi
          
          # Trouver et renommer le JAR shaded
          JAR_SHADED=$(find target/ -name "*shaded.jar" -type f | head -1)
          if [ -n "$JAR_SHADED" ] && [ -f "$JAR_SHADED" ]; then
            NEW_SHADED="target/traducteur-automatique-${VERSION}-shaded.jar"
            mv "$JAR_SHADED" "$NEW_SHADED"
            echo "✅ JAR shaded renommé: $NEW_SHADED"
          else
            echo "⚠️ JAR shaded non trouvé, création d'un lien symbolique"
            # Si pas de JAR shaded, créer un lien vers le JAR principal
            if [ -f "target/traducteur-automatique-${VERSION}.jar" ]; then
              cp "target/traducteur-automatique-${VERSION}.jar" "target/traducteur-automatique-${VERSION}-shaded.jar"
              echo "✅ JAR shaded créé par copie"
            fi
          fi
          
          # Créer une archive avec les scripts
          echo "=== Création de l'archive complète ==="
          mkdir -p "release-${VERSION}"
          
          # Copier les JARs si ils existent
          [ -f "target/traducteur-automatique-${VERSION}.jar" ] && cp "target/traducteur-automatique-${VERSION}.jar" "release-${VERSION}/"
          [ -f "target/traducteur-automatique-${VERSION}-shaded.jar" ] && cp "target/traducteur-automatique-${VERSION}-shaded.jar" "release-${VERSION}/"
          
          # Copier les scripts et documentation
          cp run.bat "release-${VERSION}/" 2>/dev/null || echo "⚠️ run.bat non trouvé"
          cp go.bat "release-${VERSION}/" 2>/dev/null || echo "⚠️ go.bat non trouvé"
          cp run.sh "release-${VERSION}/" 2>/dev/null || echo "⚠️ run.sh non trouvé"
          cp README.md "release-${VERSION}/" 2>/dev/null || echo "⚠️ README.md non trouvé"
          
          # Créer l'archive ZIP
          cd "release-${VERSION}"
          zip -r "../target/traducteur-automatique-${VERSION}-complete.zip" .
          cd ..
          
          echo ""
          echo "=== Artefacts finaux ==="
          ls -la target/*.jar target/*.zip 2>/dev/null || echo "Aucun artefact trouvé"
          
          echo ""
          echo "=== Vérification de l'existence des fichiers pour la release ==="
          [ -f "target/traducteur-automatique-${VERSION}.jar" ] && echo "✅ JAR principal: OK" || echo "❌ JAR principal: MANQUANT"
          [ -f "target/traducteur-automatique-${VERSION}-shaded.jar" ] && echo "✅ JAR shaded: OK" || echo "❌ JAR shaded: MANQUANT"
          [ -f "target/traducteur-automatique-${VERSION}-complete.zip" ] && echo "✅ Archive complète: OK" || echo "❌ Archive complète: MANQUANTE"

      - name: 🔍 Gestion intelligente des releases existantes
        id: manage_existing_release
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v$VERSION"
          
          echo "🔍 Vérification de l'existence de la release $TAG..."
          
          # Vérifier si la release existe
          if gh release view "$TAG" --repo "${{ github.repository }}" &>/dev/null; then
            echo "⚠️ Release $TAG existe déjà"
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
          
            echo "🗑️ Suppression de la release existante..."
            gh release delete "$TAG" --repo "${{ github.repository }}" --yes || {
              echo "⚠️ Impossible de supprimer via API, tentative de force..."
              # En dernier recours, on continue quand même
              echo "FORCE_UPDATE=true" >> $GITHUB_OUTPUT
            }
          
            # Attendre un peu pour que GitHub se synchronise
            sleep 5
          
            echo "✅ Release existante gérée"
          else
            echo "✅ Release $TAG n'existe pas, création possible"
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 🚀 Création de la Release GitHub (Version Robuste)
        id: create_release
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          TAG="v$VERSION"
          
          echo "🚀 Création de la release $TAG..."
          
          # Créer le contenu de la release
          cat > release_body.md << 'EOF'
          ${{ steps.generate_changelog.outputs.CHANGELOG }}
          EOF
          
          # Créer la liste des fichiers qui existent réellement
          EXISTING_FILES=""
          
          # Vérifier chaque fichier
          if [ -f "target/traducteur-automatique-${VERSION}.jar" ]; then
            EXISTING_FILES="$EXISTING_FILES target/traducteur-automatique-${VERSION}.jar"
            echo "✅ JAR principal trouvé"
          fi
          
          if [ -f "target/traducteur-automatique-${VERSION}-shaded.jar" ]; then
            EXISTING_FILES="$EXISTING_FILES target/traducteur-automatique-${VERSION}-shaded.jar"
            echo "✅ JAR shaded trouvé"
          fi
          
          if [ -f "target/traducteur-automatique-${VERSION}-complete.zip" ]; then
            EXISTING_FILES="$EXISTING_FILES target/traducteur-automatique-${VERSION}-complete.zip"
            echo "✅ Archive complète trouvée"
          fi
          
          if [ -f "run.bat" ]; then
            EXISTING_FILES="$EXISTING_FILES run.bat"
            echo "✅ Script Windows trouvé"
          fi
          
          if [ -f "run.sh" ]; then
            EXISTING_FILES="$EXISTING_FILES run.sh"
            echo "✅ Script Linux/Mac trouvé"
          fi
          
          if [ -f "README.md" ]; then
            EXISTING_FILES="$EXISTING_FILES README.md"
            echo "✅ README trouvé"
          fi
          
          echo "📦 Fichiers à inclure: $EXISTING_FILES"
          
          # Tentative 1: Avec l'action GitHub officielle
          gh release create "$TAG" \
            --repo "${{ github.repository }}" \
            --title "🎉 Traducteur Automatique v$VERSION" \
            --notes-file release_body.md \
            --latest \
            $EXISTING_FILES || {
          
            echo "⚠️ Création via gh CLI échouée, tentative avec curl..."
          
            # Tentative 2: Création manuelle avec l'API GitHub
            RELEASE_DATA=$(cat << EOF
          {
            "tag_name": "$TAG",
            "target_commitish": "master",
            "name": "🎉 Traducteur Automatique v$VERSION",
            "body": $(cat release_body.md | jq -Rs .),
            "draft": false,
            "prerelease": false,
            "generate_release_notes": false
          }
          EOF
            )
          
            echo "📡 Création de la release via API..."
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "$RELEASE_DATA")
          
            echo "Response: $RELEASE_RESPONSE"
          
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          
            if [ "$UPLOAD_URL" != "null" ] && [ "$UPLOAD_URL" != "" ]; then
              echo "✅ Release créée avec ID: $RELEASE_ID"
              echo "📤 Upload des fichiers..."
          
              # Upload des fichiers un par un
              for file in $EXISTING_FILES; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  echo "📤 Upload de $filename..."
          
                  curl -s -X POST \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Content-Type: application/octet-stream" \
                    "${UPLOAD_URL}?name=${filename}" \
                    --data-binary "@$file" || {
                    echo "⚠️ Échec upload de $filename"
                  }
                fi
              done
          
              echo "✅ Release créée et fichiers uploadés"
            else
              echo "❌ Impossible de créer la release"
              echo "Response: $RELEASE_RESPONSE"
              exit 1
            fi
          }
          
          echo "RELEASE_CREATED=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Récapitulatif de la release
        if: steps.create_release.outputs.RELEASE_CREATED == 'true'
        run: |
          echo "🎉 Release v${{ steps.get_version.outputs.VERSION }} créée avec succès !"
          echo ""
          echo "📦 Artefacts publiés:"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-shaded.jar"
          echo "  - traducteur-automatique-${{ steps.get_version.outputs.VERSION }}-complete.zip"
          echo "  - run.bat"
          echo "  - go.bat"
          echo "  - run.sh"
          echo "  - README.md"
          echo ""
          echo "🌐 URL de la release:"
          echo "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"

  test-release:
    name: 🧪 Test de la Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: 📥 Téléchargement de la release
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Test de téléchargement de la version $VERSION"
          
          # Attendre que la release soit disponible
          sleep 30
          
          # Télécharger le JAR principal
          wget "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/traducteur-automatique-${VERSION}.jar" -O test-app.jar
          
          # Vérifier que le fichier existe et n'est pas vide
          if [ -f "test-app.jar" ] && [ -s "test-app.jar" ]; then
            echo "✅ JAR téléchargé avec succès"
            ls -lh test-app.jar
          else
            echo "❌ Échec du téléchargement du JAR"
            exit 1
          fi

      - name: ☕ Configuration Java pour le test
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🏃 Test de lancement de l'application
        run: |
          echo "Test de lancement de l'application (mode headless)"
          timeout 10s java -Djava.awt.headless=true -jar test-app.jar || true
          echo "✅ L'application se lance sans erreur critique"