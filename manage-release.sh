#!/bin/bash

# Script pour g√©rer les releases GitHub (supprimer, recr√©er, lister)
# Usage: ./manage-release.sh [COMMAND] [VERSION]

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
REPO_OWNER=$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\)\/\([^.]*\).*/\1/')
REPO_NAME=$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\)\/\([^.]*\).*/\2/')

show_help() {
    echo "Usage: $0 [COMMAND] [VERSION]"
    echo ""
    echo "Commands:"
    echo "  list                 Liste toutes les releases"
    echo "  delete VERSION       Supprime une release (ex: delete 1.0.0)"
    echo "  recreate VERSION     Supprime et recr√©e une release"
    echo "  info VERSION         Affiche les infos d'une release"
    echo ""
    echo "Examples:"
    echo "  $0 list"
    echo "  $0 delete 1.0.0"
    echo "  $0 recreate 1.0.0"
    echo "  $0 info 1.0.0"
}

# V√©rifier que gh CLI est install√©
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI (gh) n'est pas install√©${NC}"
        echo ""
        echo "Installation:"
        echo "  ‚Ä¢ Ubuntu/Debian: sudo apt install gh"
        echo "  ‚Ä¢ macOS: brew install gh"
        echo "  ‚Ä¢ Windows: winget install GitHub.cli"
        echo ""
        echo "Puis: gh auth login"
        exit 1
    fi

    # V√©rifier l'authentification
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}‚ùå Vous n'√™tes pas connect√© √† GitHub${NC}"
        echo "Ex√©cutez: gh auth login"
        exit 1
    fi
}

# Lister toutes les releases
list_releases() {
    echo -e "${BLUE}üìã Releases existantes pour $REPO_OWNER/$REPO_NAME:${NC}"
    echo ""

    gh release list --repo "$REPO_OWNER/$REPO_NAME" || {
        echo -e "${YELLOW}‚ö†Ô∏è Aucune release trouv√©e ou erreur d'acc√®s${NC}"
        return 1
    }
}

# Obtenir les infos d'une release
get_release_info() {
    local version="$1"
    local tag="v$version"

    echo -e "${BLUE}‚ÑπÔ∏è Informations sur la release $tag:${NC}"
    echo ""

    gh release view "$tag" --repo "$REPO_OWNER/$REPO_NAME" || {
        echo -e "${RED}‚ùå Release $tag non trouv√©e${NC}"
        return 1
    }
}

# Supprimer une release
delete_release() {
    local version="$1"
    local tag="v$version"

    if [ -z "$version" ]; then
        echo -e "${RED}‚ùå Version manquante${NC}"
        echo "Usage: $0 delete VERSION"
        return 1
    fi

    echo -e "${YELLOW}üóëÔ∏è Suppression de la release $tag...${NC}"

    # V√©rifier si la release existe
    if ! gh release view "$tag" --repo "$REPO_OWNER/$REPO_NAME" &>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Release $tag n'existe pas${NC}"
        return 0
    fi

    # Demander confirmation
    echo -e "${RED}‚ö†Ô∏è Attention: Cette action est irr√©versible !${NC}"
    echo "Release √† supprimer: $tag"
    echo "Repository: $REPO_OWNER/$REPO_NAME"
    echo ""
    read -p "Confirmer la suppression? (y/N) " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Supprimer la release (garde le tag)
        if gh release delete "$tag" --repo "$REPO_OWNER/$REPO_NAME" --yes; then
            echo -e "${GREEN}‚úÖ Release $tag supprim√©e${NC}"

            # Demander si on supprime aussi le tag
            echo ""
            read -p "Supprimer aussi le tag Git? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git tag -d "$tag" 2>/dev/null || echo "Tag local d√©j√† absent"
                git push origin ":refs/tags/$tag" 2>/dev/null || echo "Tag distant d√©j√† absent"
                echo -e "${GREEN}‚úÖ Tag $tag supprim√©${NC}"
            fi
        else
            echo -e "${RED}‚ùå √âchec de la suppression${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Suppression annul√©e${NC}"
    fi
}

# Recr√©er une release (supprimer puis recr√©er le tag)
recreate_release() {
    local version="$1"
    local tag="v$version"

    if [ -z "$version" ]; then
        echo -e "${RED}‚ùå Version manquante${NC}"
        echo "Usage: $0 recreate VERSION"
        return 1
    fi

    echo -e "${BLUE}üîÑ Recr√©ation de la release $tag...${NC}"
    echo ""

    # Supprimer l'ancienne release
    delete_release "$version"

    # Attendre un peu
    sleep 2

    # Recr√©er le tag et d√©clencher la CI/CD
    echo -e "${YELLOW}üè∑Ô∏è Recr√©ation du tag $tag...${NC}"

    # S'assurer qu'on est √† jour
    git fetch origin

    # Supprimer le tag local s'il existe
    git tag -d "$tag" 2>/dev/null || true

    # Cr√©er le nouveau tag
    git tag -a "$tag" -m "üöÄ Release $tag (recr√©√©e)"

    # Pousser le tag
    git push origin "$tag"

    echo -e "${GREEN}‚úÖ Tag $tag recr√©√© et pouss√©${NC}"
    echo -e "${BLUE}ü§ñ La CI/CD va maintenant cr√©er la release automatiquement${NC}"
    echo ""
    echo "Surveillez: https://github.com/$REPO_OWNER/$REPO_NAME/actions"
}

# Fonction principale
main() {
    local command="$1"
    local version="$2"

    if [ -z "$command" ]; then
        show_help
        exit 1
    fi

    check_gh_cli

    case "$command" in
        "list"|"ls")
            list_releases
            ;;
        "delete"|"del"|"remove"|"rm")
            delete_release "$version"
            ;;
        "recreate"|"redo"|"reset")
            recreate_release "$version"
            ;;
        "info"|"show"|"view")
            get_release_info "$version"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $command${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# D√©tection automatique du repository
if [ -z "$REPO_OWNER" ] || [ -z "$REPO_NAME" ]; then
    echo -e "${RED}‚ùå Impossible de d√©tecter le repository GitHub${NC}"
    echo "Assurez-vous d'√™tre dans un repository Git avec une origine GitHub"
    exit 1
fi

echo -e "${BLUE}üîß Gestion des releases pour $REPO_OWNER/$REPO_NAME${NC}"
echo ""

main "$@"