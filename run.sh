#!/bin/bash

# =============================================================================
# üöÄ TRADUCTEUR AUTOMATIQUE - SWING
# Script de lancement automatique pour Linux/Mac
# =============================================================================

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="Traducteur Automatique"
MIN_JAVA_VERSION=21
MAVEN_MIN_VERSION="3.9"

# Fonction d'affichage du banner
show_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üöÄ TRADUCTEUR AUTOMATIQUE                  ‚ïë"
    echo "‚ïë                   Version Swing                         ‚ïë"
    echo "‚ïë              Avec FlatLaf & 25+ Th√®mes                  ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo
}

# Fonction d'aide
show_help() {
    echo -e "${CYAN}Usage: $0 [OPTIONS]${NC}"
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo "  -h, --help     Afficher cette aide"
    echo "  -v, --verbose  Mode verbeux avec plus de d√©tails"
    echo "  -c, --clean    Nettoyer avant de compiler"
    echo "  --dev          Mode d√©veloppeur (recompile toujours)"
    echo "  --jar [FILE]   Lancer un JAR sp√©cifique"
    echo
    echo -e "${YELLOW}Exemples:${NC}"
    echo "  $0                           # Lancement standard"
    echo "  $0 --clean                   # Nettoyage + compilation + lancement"
    echo "  $0 --jar mon-app.jar         # Lancer un JAR sp√©cifique"
    echo "  $0 --dev                     # Mode d√©veloppeur"
    echo
}

# Fonction de v√©rification de Java
check_java() {
    echo -e "${YELLOW}üîç V√©rification de Java...${NC}"

    if ! command -v java &> /dev/null; then
        echo -e "${RED}‚ùå Java n'est pas install√© ou pas dans le PATH${NC}"
        echo
        echo -e "${YELLOW}üì• Installation de Java:${NC}"
        echo "  ‚Ä¢ Ubuntu/Debian: sudo apt install openjdk-21-jdk"
        echo "  ‚Ä¢ Fedora/RHEL:   sudo dnf install java-21-openjdk-devel"
        echo "  ‚Ä¢ Arch Linux:    sudo pacman -S jdk-openjdk"
        echo "  ‚Ä¢ macOS:         brew install openjdk@21"
        echo
        echo "  Ou t√©l√©chargez depuis: https://adoptium.net/"
        exit 1
    fi

    # Obtenir la version Java
    JAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
    if [[ $JAVA_VERSION -lt $MIN_JAVA_VERSION ]]; then
        echo -e "${RED}‚ùå Java $JAVA_VERSION d√©tect√©, mais Java $MIN_JAVA_VERSION+ requis${NC}"
        echo "Veuillez installer Java $MIN_JAVA_VERSION ou sup√©rieur"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Java $JAVA_VERSION d√©tect√©${NC}"
    if [[ "$VERBOSE" == "true" ]]; then
        java -version
        echo
    fi
}

# Fonction de v√©rification de Maven
check_maven() {
    echo -e "${YELLOW}üîç V√©rification de Maven...${NC}"

    if ! command -v mvn &> /dev/null; then
        echo -e "${RED}‚ùå Maven n'est pas install√© ou pas dans le PATH${NC}"
        echo
        echo -e "${YELLOW}üì• Installation de Maven:${NC}"
        echo "  ‚Ä¢ Ubuntu/Debian: sudo apt install maven"
        echo "  ‚Ä¢ Fedora/RHEL:   sudo dnf install maven"
        echo "  ‚Ä¢ Arch Linux:    sudo pacman -S maven"
        echo "  ‚Ä¢ macOS:         brew install maven"
        echo
        echo "  Ou t√©l√©chargez depuis: https://maven.apache.org/download.cgi"
        exit 1
    fi

    MAVEN_VERSION=$(mvn -version 2>/dev/null | head -n1 | cut -d' ' -f3)
    echo -e "${GREEN}‚úÖ Maven $MAVEN_VERSION d√©tect√©${NC}"

    if [[ "$VERBOSE" == "true" ]]; then
        mvn -version
        echo
    fi
}

# Fonction de d√©tection du syst√®me
detect_system() {
    echo -e "${YELLOW}üñ•Ô∏è D√©tection du syst√®me...${NC}"

    OS=$(uname -s)
    ARCH=$(uname -m)

    case $OS in
        Linux*)
            PLATFORM="Linux"
            if command -v lsb_release &> /dev/null; then
                DISTRO=$(lsb_release -si)
                VERSION=$(lsb_release -sr)
                echo -e "${GREEN}‚úÖ Syst√®me: $PLATFORM ($DISTRO $VERSION) - $ARCH${NC}"
            else
                echo -e "${GREEN}‚úÖ Syst√®me: $PLATFORM - $ARCH${NC}"
            fi
            ;;
        Darwin*)
            PLATFORM="macOS"
            MACOS_VERSION=$(sw_vers -productVersion 2>/dev/null || echo "Version inconnue")
            echo -e "${GREEN}‚úÖ Syst√®me: $PLATFORM $MACOS_VERSION - $ARCH${NC}"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            PLATFORM="Windows (via $OS)"
            echo -e "${GREEN}‚úÖ Syst√®me: $PLATFORM - $ARCH${NC}"
            echo -e "${YELLOW}üí° Conseil: Utilisez run.bat pour une meilleure exp√©rience${NC}"
            ;;
        *)
            PLATFORM="$OS"
            echo -e "${GREEN}‚úÖ Syst√®me: $PLATFORM - $ARCH${NC}"
            ;;
    esac

    # V√©rifier l'environnement graphique
    if [[ -n "$DISPLAY" ]] || [[ -n "$WAYLAND_DISPLAY" ]] || [[ "$PLATFORM" == "macOS" ]]; then
        echo -e "${GREEN}‚úÖ Environnement graphique d√©tect√©${NC}"
        HEADLESS_MODE=false
    else
        echo -e "${YELLOW}‚ö†Ô∏è Pas d'environnement graphique d√©tect√©${NC}"
        echo -e "${YELLOW}   L'application sera lanc√©e en mode headless (test uniquement)${NC}"
        HEADLESS_MODE=true
    fi
}

# Fonction de recherche des JARs
find_jars() {
    echo -e "${YELLOW}üîç Recherche des JARs disponibles...${NC}"

    # Chercher les JARs dans target/
    if [[ -d "target" ]]; then
        JAR_WITH_DEPS=$(find target/ -name "*jar-with-dependencies.jar" -type f | head -1)
        JAR_SHADED=$(find target/ -name "*shaded.jar" -type f | head -1)
        JAR_REGULAR=$(find target/ -name "auto-translate-swing*.jar" -not -name "*dependencies*" -not -name "*shaded*" -type f | head -1)

        echo -e "${BLUE}üì¶ JARs trouv√©s:${NC}"
        [[ -n "$JAR_WITH_DEPS" ]] && echo "  ‚úÖ JAR avec d√©pendances: $(basename "$JAR_WITH_DEPS")"
        [[ -n "$JAR_SHADED" ]] && echo "  ‚úÖ JAR shaded: $(basename "$JAR_SHADED")"
        [[ -n "$JAR_REGULAR" ]] && echo "  ‚úÖ JAR standard: $(basename "$JAR_REGULAR")"

        # Choisir le meilleur JAR
        if [[ -n "$JAR_WITH_DEPS" ]]; then
            SELECTED_JAR="$JAR_WITH_DEPS"
            JAR_TYPE="avec d√©pendances"
        elif [[ -n "$JAR_SHADED" ]]; then
            SELECTED_JAR="$JAR_SHADED"
            JAR_TYPE="shaded"
        elif [[ -n "$JAR_REGULAR" ]]; then
            SELECTED_JAR="$JAR_REGULAR"
            JAR_TYPE="standard (n√©cessite les d√©pendances)"
        else
            return 1
        fi

        echo -e "${GREEN}üéØ JAR s√©lectionn√©: $(basename "$SELECTED_JAR") ($JAR_TYPE)${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è Dossier target/ non trouv√©${NC}"
        return 1
    fi
}

# Fonction de compilation
compile_project() {
    echo -e "${YELLOW}üì¶ Compilation du projet...${NC}"

    if [[ "$CLEAN_BUILD" == "true" ]]; then
        echo -e "${BLUE}üßπ Nettoyage...${NC}"
        mvn clean
    fi

    echo -e "${BLUE}üî® Compilation...${NC}"
    if [[ "$VERBOSE" == "true" ]]; then
        mvn compile
    else
        mvn compile -q
    fi

    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå √âchec de la compilation${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Compilation r√©ussie${NC}"

    # Cr√©er les packages
    echo -e "${BLUE}üì¶ Cr√©ation des packages...${NC}"
    if [[ "$VERBOSE" == "true" ]]; then
        mvn package -DskipTests
    else
        mvn package -DskipTests -q
    fi

    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå √âchec de la cr√©ation des packages${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Packages cr√©√©s avec succ√®s${NC}"
}

# Fonction de lancement de l'application
launch_app() {
    local jar_file="$1"

    echo -e "${YELLOW}üöÄ Lancement de l'application...${NC}"
    echo -e "${BLUE}üìÅ JAR: $(basename "$jar_file")${NC}"
    echo -e "${BLUE}üíæ Taille: $(du -sh "$jar_file" | cut -f1)${NC}"
    echo

    # Pr√©parer les options JVM
    JVM_OPTS="-Xmx512m"

    # Ajouter les options pour l'environnement graphique
    if [[ "$HEADLESS_MODE" == "true" ]]; then
        JVM_OPTS="$JVM_OPTS -Djava.awt.headless=true"
        echo -e "${YELLOW}‚ö†Ô∏è Lancement en mode headless (test uniquement)${NC}"
    else
        # Options pour am√©liorer le rendu graphique
        if [[ "$PLATFORM" == "Linux" ]]; then
            JVM_OPTS="$JVM_OPTS -Dsun.java2d.opengl=true"
        fi
    fi

    # Lancer l'application
    echo -e "${GREEN}‚ñ∂Ô∏è D√©marrage de $APP_NAME...${NC}"
    echo

    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${CYAN}Commande ex√©cut√©e:${NC}"
        echo "java $JVM_OPTS -jar \"$jar_file\""
        echo
    fi

    # Gestion du mode headless
    if [[ "$HEADLESS_MODE" == "true" ]]; then
        timeout 10s java $JVM_OPTS -jar "$jar_file" 2>/dev/null || true
        echo -e "${YELLOW}‚è∞ Test en mode headless termin√© (timeout normal)${NC}"
        echo -e "${GREEN}‚úÖ L'application semble fonctionnelle${NC}"
    else
        java $JVM_OPTS -jar "$jar_file"
        EXIT_CODE=$?

        if [[ $EXIT_CODE -eq 0 ]]; then
            echo
            echo -e "${GREEN}‚úÖ Application ferm√©e normalement${NC}"
        else
            echo
            echo -e "${RED}‚ùå Application ferm√©e avec le code d'erreur: $EXIT_CODE${NC}"
        fi
    fi
}

# Fonction de nettoyage en cas d'interruption
cleanup() {
    echo
    echo -e "${YELLOW}üõë Interruption d√©tect√©e, nettoyage...${NC}"
    # Ici on pourrait ajouter du nettoyage si n√©cessaire
    exit 130
}

# Fonction principale
main() {
    # Gestion des signaux
    trap cleanup SIGINT SIGTERM

    # Variables par d√©faut
    VERBOSE=false
    CLEAN_BUILD=false
    DEV_MODE=false
    SPECIFIC_JAR=""

    # Analyse des arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -c|--clean)
                CLEAN_BUILD=true
                shift
                ;;
            --dev)
                DEV_MODE=true
                CLEAN_BUILD=true
                shift
                ;;
            --jar)
                SPECIFIC_JAR="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}‚ùå Option inconnue: $1${NC}"
                echo "Utilisez --help pour voir les options disponibles"
                exit 1
                ;;
        esac
    done

    # Affichage du banner
    show_banner

    # Si un JAR sp√©cifique est demand√©
    if [[ -n "$SPECIFIC_JAR" ]]; then
        if [[ -f "$SPECIFIC_JAR" ]]; then
            echo -e "${GREEN}üéØ Utilisation du JAR sp√©cifi√©: $SPECIFIC_JAR${NC}"
            detect_system
            check_java
            launch_app "$SPECIFIC_JAR"
            exit 0
        else
            echo -e "${RED}‚ùå Fichier JAR introuvable: $SPECIFIC_JAR${NC}"
            exit 1
        fi
    fi

    # V√©rifications syst√®me
    detect_system
    check_java

    # M√©thodes de lancement par priorit√©
    echo -e "${YELLOW}üîç Recherche de la meilleure m√©thode de lancement...${NC}"
    echo

    # M√©thode 1: JAR d√©j√† compil√©
    if find_jars && [[ "$DEV_MODE" != "true" ]]; then
        echo -e "${GREEN}üéØ Utilisation du JAR existant${NC}"
        launch_app "$SELECTED_JAR"
        exit 0
    fi

    # M√©thode 2: Compilation n√©cessaire
    echo -e "${YELLOW}üì¶ Aucun JAR trouv√© ou mode d√©veloppeur activ√©${NC}"
    check_maven

    compile_project

    if find_jars; then
        launch_app "$SELECTED_JAR"
        exit 0
    else
        echo -e "${RED}‚ùå Impossible de cr√©er ou trouver un JAR ex√©cutable${NC}"
        exit 1
    fi
}

# Point d'entr√©e du script
main "$@"