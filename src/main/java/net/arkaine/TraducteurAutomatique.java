package net.arkaine;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.extras.FlatAnimatedLafChange;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.Timer;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.DefaultCaret;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TraducteurAutomatique extends JFrame {

    // Composants UI
    private JTextArea zoneTexteSource;
    private JTextArea zoneTexteDestination;
    private JComboBox<String> comboLangueSource;
    private JComboBox<String> comboLangueDestination;
    private JLabel labelLangueDetectee;
    private JProgressBar barreProgression;
    private JButton boutonTraduire;
    private JButton boutonInverser;
    private JButton boutonCapture;
    private JButton boutonCopier;
    private JCheckBox checkboxSurveillance;

    // Variables d'√©tat
    private String derniereLangueSourceDetectee = "en";
    private String dernierTexteClipboard = "";
    private String sauvegardeClipboard = "";
    private boolean applicationALeFocus = true;
    private boolean ignorerProchainClipboard = false;

    // Syst√®me de logging
    private static final DateTimeFormatter FORMAT_FICHIER = DateTimeFormatter.ofPattern("yyyyMMdd");
    private static final DateTimeFormatter FORMAT_TIMESTAMP = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private String dernierJourFichier = "";

    // Timer pour la surveillance du clipboard
    private Timer timerSurveillance;
    private Timer timerTraductionDelai;

    // Mapping des langues
    private Map<String, String> langues = new HashMap<>();

    public TraducteurAutomatique() {
        initLangues();
        initUI();
        setupEvents();
        creerDossierLogs();
        demarrerSurveillanceClipboard();
    }

    private void initLangues() {
        langues.put("Fran√ßais", "fr");
        langues.put("Anglais", "en");
        langues.put("Espagnol", "es");
        langues.put("Allemand", "de");
        langues.put("Italien", "it");
        langues.put("Portugais", "pt");
        langues.put("Russe", "ru");
        langues.put("Chinois", "zh");
        langues.put("Japonais", "ja");
        langues.put("Cor√©en", "ko");
        langues.put("Arabe", "ar");
        langues.put("N√©erlandais", "nl");
        langues.put("Su√©dois", "sv");
        langues.put("Norv√©gien", "no");
        langues.put("Danois", "da");
        langues.put("Polonais", "pl");
        langues.put("Tch√®que", "cs");
        langues.put("Hongrois", "hu");
        langues.put("Roumain", "ro");
        langues.put("Bulgare", "bg");
    }

    private void initUI() {
        setTitle("Traducteur Automatique");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(700, 800);
        setLocationRelativeTo(null);

        // Configuration du layout principal
        setLayout(new BorderLayout(10, 10));
        ((JComponent) getContentPane()).setBorder(new EmptyBorder(15, 15, 15, 15));

        // Panel principal avec scrolling
        JPanel panelPrincipal = new JPanel();
        panelPrincipal.setLayout(new BoxLayout(panelPrincipal, BoxLayout.Y_AXIS));

        // === Panel de s√©lection des langues ===
        JPanel panelLangues = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panelLangues.setBorder(new CompoundBorder(
                new TitledBorder("S√©lection des langues"),
                new EmptyBorder(5, 5, 5, 5)
        ));

        // Langue source
        panelLangues.add(new JLabel("De :"));
        comboLangueSource = new JComboBox<>();
        comboLangueSource.addItem("D√©tection automatique");
        for (String langue : langues.keySet()) {
            comboLangueSource.addItem(langue);
        }
        comboLangueSource.setSelectedItem("D√©tection automatique");
        comboLangueSource.setPreferredSize(new Dimension(170, 30));
        panelLangues.add(comboLangueSource);

        // Bouton d'inversion
        boutonInverser = new JButton("‚áÑ");
        boutonInverser.setPreferredSize(new Dimension(40, 30));
        boutonInverser.setFont(new Font(Font.DIALOG, Font.BOLD, 16));
        boutonInverser.setToolTipText("Inverser les langues (source ‚Üî destination)");
        panelLangues.add(boutonInverser);

        // Langue destination
        panelLangues.add(new JLabel("Vers :"));
        comboLangueDestination = new JComboBox<>();
        for (String langue : langues.keySet()) {
            comboLangueDestination.addItem(langue);
        }
        comboLangueDestination.setSelectedItem("Fran√ßais");
        comboLangueDestination.setPreferredSize(new Dimension(170, 30));
        panelLangues.add(comboLangueDestination);

        panelPrincipal.add(panelLangues);

        // === Label de langue d√©tect√©e ===
        labelLangueDetectee = new JLabel("Langue d√©tect√©e : Aucune");
        labelLangueDetectee.setFont(labelLangueDetectee.getFont().deriveFont(Font.ITALIC));
        labelLangueDetectee.setBorder(new EmptyBorder(5, 10, 10, 10));
        panelPrincipal.add(labelLangueDetectee);

        // === Panel texte source ===
        JPanel panelTexteSource = new JPanel(new BorderLayout(5, 5));
        panelTexteSource.setBorder(new CompoundBorder(
                new TitledBorder("Texte √† traduire"),
                new EmptyBorder(5, 5, 5, 5)
        ));

        zoneTexteSource = new JTextArea(8, 50);
        zoneTexteSource.setLineWrap(true);
        zoneTexteSource.setWrapStyleWord(true);
        zoneTexteSource.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 13));
        zoneTexteSource.setBorder(new EmptyBorder(5, 5, 5, 5));

        // Auto-scroll vers le bas quand on tape
        DefaultCaret caretSource = (DefaultCaret) zoneTexteSource.getCaret();
        caretSource.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        JScrollPane scrollSource = new JScrollPane(zoneTexteSource);
        scrollSource.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollSource.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        panelTexteSource.add(scrollSource, BorderLayout.CENTER);

        panelPrincipal.add(panelTexteSource);

        // === Panel boutons d'action ===
        JPanel panelBoutons = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));

        boutonTraduire = new JButton("Traduire");
        boutonTraduire.setPreferredSize(new Dimension(100, 35));
        panelBoutons.add(boutonTraduire);

        boutonCapture = new JButton("üì∑ Capturer √©cran");
        boutonCapture.setPreferredSize(new Dimension(150, 35));
        boutonCapture.setToolTipText("Capturer une zone de l'√©cran et traduire le texte (OCR)");
        panelBoutons.add(boutonCapture);

        // Barre de progression
        barreProgression = new JProgressBar();
        barreProgression.setIndeterminate(true);
        barreProgression.setVisible(false);
        barreProgression.setPreferredSize(new Dimension(100, 25));
        panelBoutons.add(barreProgression);

        panelPrincipal.add(panelBoutons);

        // === Panel texte destination ===
        JPanel panelTexteDestination = new JPanel(new BorderLayout(5, 5));
        panelTexteDestination.setBorder(new CompoundBorder(
                new TitledBorder("Traduction"),
                new EmptyBorder(5, 5, 5, 5)
        ));

        zoneTexteDestination = new JTextArea(8, 50);
        zoneTexteDestination.setLineWrap(true);
        zoneTexteDestination.setWrapStyleWord(true);
        zoneTexteDestination.setEditable(false);
        zoneTexteDestination.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 13));
        zoneTexteDestination.setBorder(new EmptyBorder(5, 5, 5, 5));

        // Couleur de fond pour indiquer que c'est non-√©ditable
        zoneTexteDestination.setBackground(UIManager.getColor("TextField.inactiveBackground"));

        DefaultCaret caretDest = (DefaultCaret) zoneTexteDestination.getCaret();
        caretDest.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        JScrollPane scrollDestination = new JScrollPane(zoneTexteDestination);
        scrollDestination.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollDestination.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        panelTexteDestination.add(scrollDestination, BorderLayout.CENTER);

        panelPrincipal.add(panelTexteDestination);

        // === Bouton copier ===
        JPanel panelCopier = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        boutonCopier = new JButton("Copier la traduction (Ctrl+C)");
        boutonCopier.setPreferredSize(new Dimension(220, 35));
        panelCopier.add(boutonCopier);
        panelPrincipal.add(panelCopier);

        // === Panel configuration ===
        JPanel panelConfig = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        panelConfig.setBorder(BorderFactory.createEtchedBorder());

        checkboxSurveillance = new JCheckBox("Surveiller le presse-papiers", true);
        panelConfig.add(checkboxSurveillance);

        // Bouton changement de th√®me
        JButton boutonTheme = new JButton("üåô Th√®me");
        boutonTheme.setToolTipText("Changer le th√®me de l'interface");
        boutonTheme.addActionListener(e -> changerTheme());
        panelConfig.add(boutonTheme);

        panelPrincipal.add(panelConfig);

        // === Instructions ===
        JTextArea instructions = new JTextArea(
                "üí° Astuce: S√©lectionnez du texte ‚Üí Ctrl+C ‚Üí Traduction automatique\n" +
                        "üì∑ Capture d'√©cran: Cliquez sur 'Capturer √©cran' puis s√©lectionnez la zone\n" +
                        "üö´ Code source et textes > 5000 caract√®res filtr√©s automatiquement");
        instructions.setEditable(false);
        instructions.setOpaque(false);
        instructions.setFont(instructions.getFont().deriveFont(Font.ITALIC, 11f));
        instructions.setBorder(new EmptyBorder(10, 10, 10, 10));
        panelPrincipal.add(instructions);

        // Ajouter le panel principal dans un scroll pane
        JScrollPane scrollPrincipal = new JScrollPane(panelPrincipal);
        scrollPrincipal.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPrincipal.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPrincipal.setBorder(null);

        add(scrollPrincipal, BorderLayout.CENTER);
    }

    private void setupEvents() {
        // √âv√©nements de la fen√™tre
        addWindowFocusListener(new WindowFocusListener() {
            @Override
            public void windowGainedFocus(WindowEvent e) {
                applicationALeFocus = true;
                System.out.println("Application focus: true");
            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                applicationALeFocus = false;
                System.out.println("Application focus: false");
            }
        });

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("Fermeture de l'application...");
                arreterApplication();
                System.exit(0);
            }
        });

        // √âv√©nements des boutons
        boutonTraduire.addActionListener(e -> traduireTexte());
        boutonInverser.addActionListener(e -> inverserLangues());
        boutonCapture.addActionListener(e -> demarrerCaptureEcran());
        boutonCopier.addActionListener(e -> copierTraduction());

        // Traduction automatique avec d√©lai
        zoneTexteSource.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) { planifierTraduction(); }
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) { planifierTraduction(); }
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) { planifierTraduction(); }
        });

        // Traduction quand les langues changent
        comboLangueSource.addActionListener(e -> {
            SwingUtilities.invokeLater(() -> {
                String nouveauChoix = (String) comboLangueSource.getSelectedItem();
                if (nouveauChoix != null) {
                    String texte = zoneTexteSource.getText().trim();
                    if (!texte.isEmpty()) {
                        // Mettre √† jour l'affichage
                        if (nouveauChoix.equals("D√©tection automatique")) {
                            labelLangueDetectee.setText("Langue d√©tect√©e : Auto");
                        } else {
                            labelLangueDetectee.setText("Langue s√©lectionn√©e : " + nouveauChoix);
                        }
                        traduireTexte();
                    }
                }
            });
        });

        comboLangueDestination.addActionListener(e -> {
            String texte = zoneTexteSource.getText().trim();
            if (!texte.isEmpty()) {
                SwingUtilities.invokeLater(this::traduireTexte);
            }
        });

        // Raccourci clavier Ctrl+C global
        KeyStroke ctrlC = KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ctrlC, "copier");
        getRootPane().getActionMap().put("copier", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
                if (focusOwner == zoneTexteDestination || focusOwner == boutonCopier ||
                        focusOwner == null || focusOwner == getRootPane()) {
                    copierTraduction();
                }
            }
        });
    }

    private void planifierTraduction() {
        if (timerTraductionDelai != null) {
            timerTraductionDelai.stop();
        }

        timerTraductionDelai = new Timer(1000, e -> {
            String texte = zoneTexteSource.getText().trim();
            if (!texte.isEmpty()) {
                traduireTexte();
            }
            timerTraductionDelai.stop();
        });
        timerTraductionDelai.setRepeats(false);
        timerTraductionDelai.start();
    }

    private void changerTheme() {
        String[] themes = {
                "FlatLaf Light", "FlatLaf Dark", "FlatLaf IntelliJ",
                "Arc", "Arc Orange", "Carbon", "Cobalt 2", "Cyan Light",
                "Dark Flat", "Dark Purple", "Dracula", "GitHub", "Gruvbox Dark",
                "High Contrast", "Light Flat", "Material Theme UI Lite",
                "Monokai Pro", "Nord", "One Dark", "Solarized Dark", "Solarized Light"
        };

        String choix = (String) JOptionPane.showInputDialog(
                this, "Choisissez un th√®me :", "S√©lection du th√®me",
                JOptionPane.QUESTION_MESSAGE, null, themes, themes[0]);

        if (choix != null) {
            appliquerTheme(choix);
        }
    }

    private void appliquerTheme(String nomTheme) {
        try {
            LookAndFeel nouveauTheme = switch (nomTheme) {
                case "FlatLaf Light" -> new FlatLightLaf();
                case "FlatLaf Dark" -> new FlatDarculaLaf();
                case "FlatLaf IntelliJ" -> new FlatIntelliJLaf();
                case "Arc" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatArcIJTheme").getDeclaredConstructor().newInstance();
                case "Arc Orange" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatArcOrangeIJTheme").getDeclaredConstructor().newInstance();
                case "Carbon" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatCarbonIJTheme").getDeclaredConstructor().newInstance();
                case "Cobalt 2" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatCobalt2IJTheme").getDeclaredConstructor().newInstance();
                case "Cyan Light" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme").getDeclaredConstructor().newInstance();
                case "Dark Flat" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatDarkFlatIJTheme").getDeclaredConstructor().newInstance();
                case "Dark Purple" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme").getDeclaredConstructor().newInstance();
                case "Dracula" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatDraculaIJTheme").getDeclaredConstructor().newInstance();
                case "GitHub" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatGitHubIJTheme").getDeclaredConstructor().newInstance();
                case "Gruvbox Dark" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatGruvboxDarkMediumIJTheme").getDeclaredConstructor().newInstance();
                case "High Contrast" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatHighContrastIJTheme").getDeclaredConstructor().newInstance();
                case "Light Flat" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatLightFlatIJTheme").getDeclaredConstructor().newInstance();
                case "Material Theme UI Lite" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialLighterIJTheme").getDeclaredConstructor().newInstance();
                case "Monokai Pro" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatMonokaiProIJTheme").getDeclaredConstructor().newInstance();
                case "Nord" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatNordIJTheme").getDeclaredConstructor().newInstance();
                case "One Dark" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatOneDarkIJTheme").getDeclaredConstructor().newInstance();
                case "Solarized Dark" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatSolarizedDarkIJTheme").getDeclaredConstructor().newInstance();
                case "Solarized Light" -> (LookAndFeel) Class.forName("com.formdev.flatlaf.intellijthemes.FlatSolarizedLightIJTheme").getDeclaredConstructor().newInstance();
                default -> new FlatIntelliJLaf();
            };

            FlatAnimatedLafChange.showSnapshot();
            UIManager.setLookAndFeel(nouveauTheme);
            FlatLaf.updateUI();
            FlatAnimatedLafChange.hideSnapshotWithAnimation();

            // Mettre √† jour la couleur de fond de la zone de destination
            zoneTexteDestination.setBackground(UIManager.getColor("TextField.inactiveBackground"));

        } catch (Exception e) {
            System.err.println("Erreur lors du changement de th√®me: " + e.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Impossible d'appliquer le th√®me " + nomTheme + "\n" + e.getMessage(),
                    "Erreur de th√®me", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void demarrerSurveillanceClipboard() {
        if (timerSurveillance != null) {
            timerSurveillance.stop();
        }

        timerSurveillance = new Timer(1000, e -> {
            if (checkboxSurveillance.isSelected() && !applicationALeFocus && !ignorerProchainClipboard) {
                try {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    if (clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {
                        String contenu = (String) clipboard.getData(DataFlavor.stringFlavor);
                        if (contenu != null && !contenu.equals(dernierTexteClipboard) &&
                                contenu.trim().length() > 0) {

                            // V√©rifications de s√©curit√© pour le clipboard (plus strict)
                            if (contenu.length() <= 2000 && !ressembleADuCode(contenu)) {
                                sauvegardeClipboard = contenu;
                                dernierTexteClipboard = contenu;

                                SwingUtilities.invokeLater(() -> {
                                    zoneTexteSource.setText(contenu);
                                    System.out.println("Nouveau texte d√©tect√©: " +
                                            contenu.substring(0, Math.min(50, contenu.length())) + "...");
                                });
                            } else {
                                System.out.println("Texte clipboard ignor√© - " +
                                        (contenu.length() > 2000 ? "trop long (" + contenu.length() + " caract√®res)" : "code source d√©tect√©"));
                                dernierTexteClipboard = contenu; // Pour √©viter de retraiter
                            }
                        }
                    }
                } catch (Exception ex) {
                    System.err.println("Erreur lors de la lecture du presse-papiers: " + ex.getMessage());
                }
            } else if (ignorerProchainClipboard) {
                ignorerProchainClipboard = false;
                System.out.println("Clipboard ignor√© apr√®s copie interne");
            }
        });
        timerSurveillance.start();
    }

    private void traduireTexte() {
        String texte = zoneTexteSource.getText().trim();
        if (texte.isEmpty()) {
            return;
        }

        // V√©rifications de s√©curit√© et de qualit√©
        String messageErreur = validerTexteATraduire(texte);
        if (messageErreur != null) {
            zoneTexteDestination.setText(messageErreur);
            labelLangueDetectee.setText("‚ö†Ô∏è Texte non traduit");
            return;
        }

        String langueDestination = langues.get((String) comboLangueDestination.getSelectedItem());

        // D√©sactiver les contr√¥les pendant la traduction
        boutonTraduire.setEnabled(false);
        barreProgression.setVisible(true);

        // Traduction asynchrone
        CompletableFuture.supplyAsync(() -> {
            try {
                String langueSource;
                String langueSourceSelectionnee = (String) comboLangueSource.getSelectedItem();

                if (langueSourceSelectionnee != null && !langueSourceSelectionnee.equals("D√©tection automatique")) {
                    // Utiliser la langue s√©lectionn√©e manuellement
                    langueSource = langues.get(langueSourceSelectionnee);
                    System.out.println("Langue source manuelle: " + langueSourceSelectionnee + " (" + langueSource + ")");
                } else {
                    // Utiliser la d√©tection automatique
                    System.out.println("D√©tection automatique de la langue source...");

                    // Essayer d'abord avec l'API MyMemory (plus fiable)
                    try {
                        String[] resultatMyMemory = traduireAvecMyMemory(texte, langueDestination);
                        if (resultatMyMemory[1] != null && !resultatMyMemory[1].trim().isEmpty()
                                && !resultatMyMemory[1].equals("NO QUERY SPECIFIED. EXAMPLE: GET?Q=HELLO&LANGPAIR=EN|IT")) {
                            return resultatMyMemory;
                        }
                    } catch (Exception e) {
                        System.err.println("Erreur MyMemory, essai Google Translate: " + e.getMessage());
                    }

                    // Fallback vers Google Translate avec parsing am√©lior√© pour la d√©tection
                    langueSource = detecterLangueSimple(texte);
                    if (langueSource.equals("en")) { // Si d√©tection simple donne anglais, v√©rifier avec Google
                        try {
                            String langueDetecteeGoogle = detecterLangueAvecGoogle(texte);
                            if (!langueDetecteeGoogle.equals("auto")) {
                                langueSource = langueDetecteeGoogle;
                            }
                        } catch (Exception e) {
                            System.err.println("D√©tection Google √©chou√©e: " + e.getMessage());
                        }
                    }
                }

                // Traduire le texte
                String traduction;
                if (langueSourceSelectionnee != null && !langueSourceSelectionnee.equals("D√©tection automatique")) {
                    // Forcer la traduction avec la langue choisie
                    try {
                        traduction = traduireAvecMyMemoryForce(texte, langueSource, langueDestination);
                    } catch (Exception e) {
                        traduction = traduireAvecGoogleTranslateAmeliore(texte, langueSource, langueDestination);
                    }
                } else {
                    // Utiliser le syst√®me normal
                    traduction = traduireAvecGoogleTranslateAmeliore(texte, langueSource, langueDestination);
                }

                return new String[]{langueSource, traduction};

            } catch (Exception e) {
                throw new RuntimeException("Erreur lors de la traduction: " + e.getMessage(), e);
            }
        }).whenComplete((resultat, exception) -> {
            SwingUtilities.invokeLater(() -> {
                boutonTraduire.setEnabled(true);
                barreProgression.setVisible(false);

                if (exception != null) {
                    zoneTexteDestination.setText("Erreur lors de la traduction : " + exception.getMessage());
                    System.err.println("Erreur de traduction: " + exception.getMessage());
                } else {
                    String langueSource = resultat[0];
                    String traduction = resultat[1];

                    // Affichage diff√©renci√© selon le mode
                    String langueSourceSelectionnee = (String) comboLangueSource.getSelectedItem();
                    if (langueSourceSelectionnee != null && !langueSourceSelectionnee.equals("D√©tection automatique")) {
                        labelLangueDetectee.setText("Langue s√©lectionn√©e : " + langueSourceSelectionnee);
                    } else {
                        labelLangueDetectee.setText("Langue d√©tect√©e : " + obtenirNomLangue(langueSource));
                    }

                    zoneTexteDestination.setText(traduction);

                    // Sauvegarder la derni√®re langue source pour l'inversion
                    derniereLangueSourceDetectee = langueSource;

                    enregistrerTraduction(zoneTexteSource.getText().trim(), traduction, langueSource, langueDestination);
                }
            });
        });
    }

    /**
     * D√©marrer la capture d'√©cran avec s√©lection de zone
     */
    private void demarrerCaptureEcran() {
        try {
            // Minimiser la fen√™tre principale temporairement
            setExtendedState(JFrame.ICONIFIED);

            // Attendre un peu que la fen√™tre se minimise
            Timer timer = new Timer(500, e -> creerOverlaySelection());
            timer.setRepeats(false);
            timer.start();

        } catch (Exception e) {
            System.err.println("Erreur lors du d√©marrage de la capture: " + e.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Impossible de d√©marrer la capture d'√©cran: " + e.getMessage(),
                    "Erreur de capture", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Cr√©er l'overlay de s√©lection - UNE SEULE fen√™tre couvrant TOUS les √©crans
     */
    private void creerOverlaySelection() {
        try {
            // Obtenir les dimensions de tous les √©crans
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] screens = ge.getScreenDevices();

            System.out.println("Nombre d'√©crans d√©tect√©s: " + screens.length);

            // Calculer la zone totale de tous les √©crans (bounding box)
            Rectangle zoneTotale = new Rectangle();
            for (int i = 0; i < screens.length; i++) {
                GraphicsConfiguration config = screens[i].getDefaultConfiguration();
                Rectangle bounds = config.getBounds();
                System.out.println("√âcran " + i + ": " + bounds);

                if (i == 0) {
                    zoneTotale = new Rectangle(bounds);
                } else {
                    zoneTotale = zoneTotale.union(bounds);
                }
            }

            System.out.println("Zone totale calcul√©e: " + zoneTotale);

            // Cr√©er une capture compl√®te de tous les √©crans
            Robot robot = new Robot();
            BufferedImage captureComplete = robot.createScreenCapture(zoneTotale);

            // Variables pour la s√©lection
            final Rectangle[] zoneSelection = {null};
            final int[] startX = {0};
            final int[] startY = {0};
            final boolean[] isSelecting = {false};

            // Cr√©er UNE SEULE fen√™tre qui couvre tous les √©crans
            JWindow overlayWindow = new JWindow();
            overlayWindow.setAlwaysOnTop(true);
            overlayWindow.setBounds(zoneTotale);
            overlayWindow.setBackground(new Color(0, 0, 0, 100)); // Semi-transparent

            // Panel personnalis√© pour la s√©lection
            Rectangle finalZoneTotale = zoneTotale;
            JPanel overlayPanel = new JPanel() {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    Graphics2D g2d = (Graphics2D) g.create();

                    // Dessiner l'image de fond assombrie
                    g2d.drawImage(captureComplete, -finalZoneTotale.x, -finalZoneTotale.y, null);
                    g2d.setColor(new Color(0, 0, 0, 80));
                    g2d.fillRect(0, 0, getWidth(), getHeight());

                    // Dessiner la zone de s√©lection si elle existe
                    if (zoneSelection[0] != null) {
                        Rectangle sel = zoneSelection[0];

                        // Zone claire (s√©lectionn√©e)
                        int localX = sel.x - finalZoneTotale.x;
                        int localY = sel.y - finalZoneTotale.y;

                        if (localX >= 0 && localY >= 0 &&
                                localX + sel.width <= getWidth() && localY + sel.height <= getHeight()) {

                            // Effacer l'assombrissement dans la zone s√©lectionn√©e
                            g2d.setComposite(AlphaComposite.Clear);
                            g2d.fillRect(localX, localY, sel.width, sel.height);

                            // Redessiner l'image originale dans la zone
                            g2d.setComposite(AlphaComposite.SrcOver);
                            g2d.drawImage(captureComplete.getSubimage(sel.x, sel.y, sel.width, sel.height),
                                    localX, localY, null);

                            // Bordure de s√©lection
                            g2d.setColor(Color.RED);
                            g2d.setStroke(new BasicStroke(3));
                            g2d.drawRect(localX, localY, sel.width, sel.height);

                            // Afficher les dimensions
                            g2d.setColor(Color.WHITE);
                            g2d.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 14));
                            String info = sel.width + " √ó " + sel.height + " px";

                            int textX = localX + 5;
                            int textY = localY - 10;
                            if (textY < 20) textY = localY + 20;

                            // Outline noir pour le texte
                            g2d.setColor(Color.BLACK);
                            for (int dx = -1; dx <= 1; dx++) {
                                for (int dy = -1; dy <= 1; dy++) {
                                    if (dx != 0 || dy != 0) {
                                        g2d.drawString(info, textX + dx, textY + dy);
                                    }
                                }
                            }
                            g2d.setColor(Color.WHITE);
                            g2d.drawString(info, textX, textY);

                            // Croix au centre
                            g2d.setColor(Color.RED);
                            g2d.setStroke(new BasicStroke(1));
                            int centerX = localX + sel.width / 2;
                            int centerY = localY + sel.height / 2;
                            g2d.drawLine(centerX - 10, centerY, centerX + 10, centerY);
                            g2d.drawLine(centerX, centerY - 10, centerX, centerY + 10);
                        }
                    }

                    g2d.dispose();
                }
            };

            // Gestion des √©v√©nements souris
            Rectangle finalZoneTotale1 = zoneTotale;
            overlayPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    startX[0] = e.getX() + finalZoneTotale1.x;
                    startY[0] = e.getY() + finalZoneTotale1.y;
                    isSelecting[0] = true;
                    System.out.println("D√©but s√©lection globale: " + startX[0] + ", " + startY[0]);
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    if (isSelecting[0] && zoneSelection[0] != null) {
                        isSelecting[0] = false;

                        System.out.println("Zone s√©lectionn√©e globale: " + zoneSelection[0]);

                        // Fermer l'overlay
                        overlayWindow.dispose();

                        // Traiter la capture si la s√©lection est suffisante
                        if (zoneSelection[0].width > 10 && zoneSelection[0].height > 10) {
                            traiterCaptureZone(zoneSelection[0]);
                        } else {
                            System.out.println("S√©lection trop petite ignor√©e");
                            restaurerFenetrePrincipale();
                        }
                    }
                }
            });

            Rectangle finalZoneTotale2 = zoneTotale;
            overlayPanel.addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    if (isSelecting[0]) {
                        int endX = e.getX() + finalZoneTotale2.x;
                        int endY = e.getY() + finalZoneTotale2.y;

                        int x = Math.min(startX[0], endX);
                        int y = Math.min(startY[0], endY);
                        int w = Math.abs(endX - startX[0]);
                        int h = Math.abs(endY - startY[0]);

                        zoneSelection[0] = new Rectangle(x, y, w, h);
                        overlayPanel.repaint();
                    }
                }
            });

            // Gestion du clavier pour annuler (Escape)
            overlayPanel.setFocusable(true);
            overlayPanel.addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                        overlayWindow.dispose();
                        restaurerFenetrePrincipale();
                    }
                }
            });

            overlayWindow.add(overlayPanel);
            overlayWindow.setVisible(true);
            overlayPanel.requestFocusInWindow();

            System.out.println("Overlay unifi√© cr√©√© couvrant tous les √©crans: " + zoneTotale);

        } catch (Exception e) {
            System.err.println("Erreur lors de la cr√©ation de l'overlay: " + e.getMessage());
            restaurerFenetrePrincipale();
        }
    }

    /**
     * Traiter la capture de la zone s√©lectionn√©e
     */
    private void traiterCaptureZone(Rectangle zone) {
        CompletableFuture.supplyAsync(() -> {
            try {
                // Capturer la zone sp√©cifique
                Robot robot = new Robot();
                BufferedImage capture = robot.createScreenCapture(zone);

                // Sauvegarder temporairement l'image
                File tempFile = File.createTempFile("capture_ocr_", ".png");
                ImageIO.write(capture, "PNG", tempFile);

                System.out.println("Image captur√©e sauv√©e: " + tempFile.getAbsolutePath());

                // Effectuer l'OCR
                String texteExtrait = effectuerOCR(tempFile);

                // Nettoyer le fichier temporaire
                tempFile.delete();

                return texteExtrait;

            } catch (Exception e) {
                throw new RuntimeException("Erreur OCR: " + e.getMessage(), e);
            }
        }).whenComplete((texte, exception) -> {
            SwingUtilities.invokeLater(() -> {
                if (exception != null) {
                    System.err.println("Erreur OCR: " + exception.getMessage());
                    JOptionPane.showMessageDialog(this,
                            "Erreur lors de l'extraction du texte: " + exception.getMessage(),
                            "Erreur OCR", JOptionPane.ERROR_MESSAGE);
                } else if (texte != null && !texte.trim().isEmpty()) {
                    System.out.println("Texte OCR extrait: " + texte);
                    zoneTexteSource.setText(texte.trim());
                    // La traduction se d√©clenchera automatiquement
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Aucun texte d√©tect√© dans la capture.\nEssayez avec une image plus nette ou une zone plus grande.",
                            "OCR", JOptionPane.INFORMATION_MESSAGE);
                }
                restaurerFenetrePrincipale();
            });
        });

        // Afficher l'indicateur de progression
        SwingUtilities.invokeLater(() -> {
            barreProgression.setVisible(true);
            setTitle("üîç Extraction du texte en cours...");
        });
    }

    /**
     * Effectuer l'OCR sur l'image captur√©e
     */
    private String effectuerOCR(File imageFile) throws Exception {
        // Utiliser l'API OCR.space (gratuite) pour l'extraction de texte
        String apiKey = "K87899142388957"; // Cl√© publique de d√©monstration
        String url = "https://api.ocr.space/parse/image";

        // Pr√©parer la requ√™te multipart
        String boundary = "----WebKitFormBoundary" + System.currentTimeMillis();

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        connection.setRequestProperty("apikey", apiKey);
        connection.setDoOutput(true);
        connection.setConnectTimeout(30000);
        connection.setReadTimeout(30000);

        try (OutputStream os = connection.getOutputStream();
             PrintWriter writer = new PrintWriter(new OutputStreamWriter(os, "UTF-8"), true)) {

            // Param√®tres OCR
            writer.append("--").append(boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"language\"").append("\r\n");
            writer.append("Content-Type: text/plain; charset=UTF-8").append("\r\n");
            writer.append("\r\n");
            writer.append("eng").append("\r\n");

            writer.append("--").append(boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"isOverlayRequired\"").append("\r\n");
            writer.append("Content-Type: text/plain; charset=UTF-8").append("\r\n");
            writer.append("\r\n");
            writer.append("false").append("\r\n");

            writer.append("--").append(boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"detectOrientation\"").append("\r\n");
            writer.append("Content-Type: text/plain; charset=UTF-8").append("\r\n");
            writer.append("\r\n");
            writer.append("true").append("\r\n");

            writer.append("--").append(boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"scale\"").append("\r\n");
            writer.append("Content-Type: text/plain; charset=UTF-8").append("\r\n");
            writer.append("\r\n");
            writer.append("true").append("\r\n");

            // Fichier image
            writer.append("--").append(boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"file\"; filename=\"").append(imageFile.getName()).append("\"").append("\r\n");
            writer.append("Content-Type: image/png").append("\r\n");
            writer.append("\r\n").flush();

            // Copier le fichier
            Files.copy(imageFile.toPath(), os);
            os.flush();

            writer.append("\r\n").flush();
            writer.append("--").append(boundary).append("--").append("\r\n").flush();
        }

        // Lire la r√©ponse
        int responseCode = connection.getResponseCode();
        System.out.println("Code de r√©ponse OCR: " + responseCode);

        if (responseCode == 200) {
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }

                // Parser la r√©ponse JSON
                JsonObject jsonResponse = JsonParser.parseString(response.toString()).getAsJsonObject();
                System.out.println("R√©ponse OCR: " + jsonResponse.toString());

                if (jsonResponse.has("ParsedResults") && jsonResponse.get("ParsedResults").isJsonArray()) {
                    JsonArray results = jsonResponse.getAsJsonArray("ParsedResults");
                    if (results.size() > 0) {
                        JsonObject result = results.get(0).getAsJsonObject();
                        if (result.has("ParsedText")) {
                            return result.get("ParsedText").getAsString();
                        }
                    }
                }

                // V√©rifier les erreurs
                if (jsonResponse.has("ErrorMessage") && !jsonResponse.get("ErrorMessage").isJsonNull()) {
                    throw new Exception("Erreur OCR: " + jsonResponse.get("ErrorMessage").getAsString());
                }

                return "";
            }
        } else {
            throw new Exception("Erreur HTTP: " + responseCode + " " + connection.getResponseMessage());
        }
    }

    /**
     * Restaurer la fen√™tre principale
     */
    private void restaurerFenetrePrincipale() {
        SwingUtilities.invokeLater(() -> {
            try {
                setExtendedState(JFrame.NORMAL);
                toFront();
                requestFocus();
                setTitle("Traducteur Automatique");
                barreProgression.setVisible(false);
                System.out.println("Fen√™tre principale restaur√©e");
            } catch (Exception e) {
                System.err.println("Erreur lors de la restauration: " + e.getMessage());
            }
        });
    }

    /**
     * Traduction forc√©e avec MyMemory (langue source sp√©cifi√©e)
     */
    private String traduireAvecMyMemoryForce(String texte, String langueSource, String langueDestination) throws Exception {
        String langpair = langueSource + "|" + langueDestination;
        String url = "https://api.mymemory.translated.net/get?q="
                + URLEncoder.encode(texte, "UTF-8")
                + "&langpair=" + langpair;

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (JavaFX Translation App)");
        connection.setConnectTimeout(10000);
        connection.setReadTimeout(10000);

        BufferedReader reader = new BufferedReader(
                new InputStreamReader(connection.getInputStream(), "UTF-8"));
        StringBuilder response = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Parser la r√©ponse JSON avec Gson
        JsonObject jsonResponse = JsonParser.parseString(response.toString()).getAsJsonObject();

        if (jsonResponse.has("responseData") && !jsonResponse.get("responseData").isJsonNull()) {
            JsonObject responseData = jsonResponse.getAsJsonObject("responseData");
            if (responseData.has("translatedText")) {
                String traduction = responseData.get("translatedText").getAsString();
                System.out.println("Traduction MyMemory forc√©e r√©ussie: " + traduction.substring(0, Math.min(50, traduction.length())));
                return traduction;
            }
        }

        throw new Exception("R√©ponse MyMemory invalide pour traduction forc√©e");
    }

    /**
     * Valider le texte avant traduction (√©viter code source, textes trop longs, etc.)
     */
    private String validerTexteATraduire(String texte) {
        // Limite de longueur (5000 caract√®res)
        if (texte.length() > 5000) {
            return "‚ö†Ô∏è Texte trop long pour la traduction (max 5000 caract√®res).\n" +
                    "Longueur actuelle : " + texte.length() + " caract√®res.\n" +
                    "Veuillez raccourcir le texte ou le diviser en plusieurs parties.";
        }

        // D√©tecter du code source potentiel
        if (ressembleADuCode(texte)) {
            return "üö´ Ce texte ressemble √† du code source ou √† un format technique.\n" +
                    "Les traductions de code peuvent causer des erreurs.\n" +
                    "Si vous souhaitez vraiment traduire ce contenu, " +
                    "copiez seulement les commentaires ou la documentation.";
        }

        // D√©tecter trop de caract√®res sp√©ciaux (peut √™tre du binaire, logs, etc.)
        if (tropDeCaracteresSpeciaux(texte)) {
            return "‚ö†Ô∏è Ce texte contient trop de caract√®res sp√©ciaux ou de symboles.\n" +
                    "Il pourrait s'agir de donn√©es binaires, logs syst√®me, ou format technique.\n" +
                    "V√©rifiez que c'est bien du texte naturel √† traduire.";
        }

        return null; // Texte valide
    }

    /**
     * D√©tecter si le texte ressemble √† du code source
     */
    private boolean ressembleADuCode(String texte) {
        // Compter les indicateurs de code
        int indicateursCode = 0;

        // Patterns de code courants
        if (texte.matches(".*\\b(public|private|protected|class|interface|import|package|function|def|var|let|const|return|if|else|while|for|try|catch|throw)\\b.*")) {
            indicateursCode += 3;
        }

        // Balises HTML/XML
        if (texte.matches(".*<[a-zA-Z][^>]*>.*") || texte.matches(".*</[a-zA-Z][^>]*>.*")) {
            indicateursCode += 2;
        }

        // JSON/YAML
        if (texte.matches(".*\\{[\"']\\w+[\"']\\s*:.*") || texte.matches(".*:\\s*[\"'].*[\"'].*")) {
            indicateursCode += 2;
        }

        // Expressions r√©guli√®res ou patterns
        if (texte.matches(".*\\\\[nrtbf].*") || texte.matches(".*\\[\\^.*\\].*")) {
            indicateursCode += 1;
        }

        // Accolades et parenth√®ses nombreuses (fonctions, objets)
        long accolades = texte.chars().filter(c -> c == '{' || c == '}').count();
        long parentheses = texte.chars().filter(c -> c == '(' || c == ')').count();
        if (accolades > 3 || parentheses > 10) {
            indicateursCode += 1;
        }

        // Points-virgules multiples (instructions)
        if (texte.chars().filter(c -> c == ';').count() > 3) {
            indicateursCode += 1;
        }

        // Mots techniques fr√©quents
        String[] motsTechniques = {"null", "undefined", "boolean", "string", "array", "object",
                "href", "src", "onclick", "getElementById", "querySelector",
                "SELECT", "FROM", "WHERE", "INSERT", "UPDATE", "DELETE",
                "git", "commit", "push", "pull", "branch", "merge"};
        for (String mot : motsTechniques) {
            if (texte.toLowerCase().contains(mot.toLowerCase())) {
                indicateursCode += 1;
            }
        }

        // Extensions de fichiers
        if (texte.matches(".*\\.(js|java|py|php|html|css|xml|json|yml|yaml|sql|sh|bat)\\b.*")) {
            indicateursCode += 2;
        }

        // URLs nombreuses
        if (texte.split("https?://").length > 3) {
            indicateursCode += 1;
        }

        // Seuil de d√©tection : si 4+ indicateurs, probablement du code
        return indicateursCode >= 4;
    }

    /**
     * D√©tecter trop de caract√®res sp√©ciaux
     */
    private boolean tropDeCaracteresSpeciaux(String texte) {
        if (texte.length() < 50) return false; // Ignorer les textes courts

        // Compter les caract√®res non-alphab√©tiques (hors espaces et ponctuation courante)
        long caracteresSpeciaux = texte.chars()
                .filter(c -> !Character.isLetterOrDigit(c) &&
                        c != ' ' && c != '.' && c != ',' && c != '!' && c != '?' &&
                        c != ':' && c != ';' && c != '\n' && c != '\r' && c != '\t' &&
                        c != '-' && c != '_' && c != '\'' && c != '"' && c != '(' && c != ')' &&
                        c != '[' && c != ']')
                .count();

        // Si plus de 25% de caract√®res sp√©ciaux, probablement pas du texte naturel
        double ratioSpeciaux = (double) caracteresSpeciaux / texte.length();
        return ratioSpeciaux > 0.25;
    }

    /**
     * Traduction avec l'API MyMemory (plus fiable et gratuite)
     */
    private String[] traduireAvecMyMemory(String texte, String langueDestination) throws Exception {
        // D√©tecter la langue source d'abord - MyMemory ne supporte pas "auto"
        String langueSource = detecterLangueSimple(texte);

        // Si la d√©tection simple √©choue, essayer avec Google
        if (langueSource.equals("auto")) {
            try {
                langueSource = detecterLangueAvecGoogle(texte);
                System.out.println("Langue d√©tect√©e par Google: " + langueSource);
            } catch (Exception e) {
                System.err.println("D√©tection Google √©chou√©e, utilisation de 'en' par d√©faut");
                langueSource = "en"; // Par d√©faut anglais
            }
        }

        // V√©rifier que la langue source n'est pas "auto"
        if (langueSource.equals("auto")) {
            langueSource = "en"; // Fallback vers anglais
        }

        System.out.println("Langue source pour MyMemory: " + langueSource + " -> " + langueDestination);

        // Construire l'URL pour MyMemory
        String langpair = langueSource + "|" + langueDestination;
        String url = "https://api.mymemory.translated.net/get?q="
                + URLEncoder.encode(texte, "UTF-8")
                + "&langpair=" + langpair;

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (JavaFX Translation App)");
        connection.setConnectTimeout(10000);
        connection.setReadTimeout(10000);

        BufferedReader reader = new BufferedReader(
                new InputStreamReader(connection.getInputStream(), "UTF-8"));
        StringBuilder response = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Parser la r√©ponse JSON avec Gson
        JsonObject jsonResponse = JsonParser.parseString(response.toString()).getAsJsonObject();

        if (jsonResponse.has("responseData") && !jsonResponse.get("responseData").isJsonNull()) {
            JsonObject responseData = jsonResponse.getAsJsonObject("responseData");
            if (responseData.has("translatedText")) {
                String traduction = responseData.get("translatedText").getAsString();
                System.out.println("Traduction MyMemory r√©ussie: " + traduction.substring(0, Math.min(50, traduction.length())));
                return new String[]{langueSource, traduction};
            }
        }

        throw new Exception("R√©ponse MyMemory invalide");
    }

    /**
     * D√©tection simple de langue bas√©e sur des patterns
     */
    private String detecterLangueSimple(String texte) {
        texte = texte.toLowerCase().trim();

        // Patterns pour d√©tecter les langues courantes
        if (texte.matches(".*\\b(the|and|or|but|in|on|at|to|for|with|by)\\b.*")) {
            return "en";
        }
        if (texte.matches(".*\\b(le|la|les|et|ou|mais|dans|sur|pour|avec|par|de|du|des)\\b.*")) {
            return "fr";
        }
        if (texte.matches(".*\\b(el|la|los|las|y|o|pero|en|con|por|para|de|del)\\b.*")) {
            return "es";
        }
        if (texte.matches(".*\\b(der|die|das|und|oder|aber|in|auf|mit|von|zu)\\b.*")) {
            return "de";
        }

        // Pattern pour d√©tecter si c'est probablement de l'anglais (beaucoup de mots courts)
        String[] words = texte.split("\\s+");
        int shortWords = 0;
        for (String word : words) {
            if (word.length() <= 3) shortWords++;
        }
        if (shortWords > words.length * 0.3) {
            return "en";
        }

        return "auto"; // Langue inconnue
    }

    /**
     * Version am√©lior√©e de la traduction Google avec parsing JSON robuste
     */
    private String traduireAvecGoogleTranslateAmeliore(String texte, String langueSource, String langueDestination) throws Exception {
        String url = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=" + langueSource
                + "&tl=" + langueDestination + "&dt=t&q=" + URLEncoder.encode(texte, "UTF-8");

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (JavaFX Translation App)");
        connection.setConnectTimeout(10000);
        connection.setReadTimeout(10000);

        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
        StringBuilder response = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        String jsonResponse = response.toString();
        return extraireTraductionAmeliore(jsonResponse);
    }

    /**
     * Extraction am√©lior√©e de la traduction avec parsing JSON robuste
     */
    private String extraireTraductionAmeliore(String jsonResponse) {
        try {
            System.out.println("R√©ponse JSON brute: " + jsonResponse.substring(0, Math.min(200, jsonResponse.length())) + "...");

            // Essayer d'abord le parsing JSON avec Gson
            try {
                JsonArray jsonArray = JsonParser.parseString(jsonResponse).getAsJsonArray();
                if (jsonArray.size() > 0 && jsonArray.get(0).isJsonArray()) {
                    JsonArray translationsArray = jsonArray.get(0).getAsJsonArray();
                    StringBuilder traduction = new StringBuilder();

                    for (JsonElement element : translationsArray) {
                        if (element.isJsonArray()) {
                            JsonArray translationPart = element.getAsJsonArray();
                            if (translationPart.size() > 0) {
                                traduction.append(translationPart.get(0).getAsString());
                            }
                        }
                    }

                    if (traduction.length() > 0) {
                        String result = traduction.toString().trim();
                        System.out.println("Traduction extraite avec Gson: " + result);
                        return result;
                    }
                }
            } catch (Exception e) {
                System.err.println("Parsing Gson √©chou√©, essai regex: " + e.getMessage());
            }

            // Fallback avec regex plus robuste
            Pattern pattern = Pattern.compile("\\[\\[\\[\"([^\"]+)\"", Pattern.DOTALL);
            Matcher matcher = pattern.matcher(jsonResponse);

            StringBuilder traduction = new StringBuilder();
            while (matcher.find()) {
                traduction.append(matcher.group(1));
            }

            if (traduction.length() > 0) {
                String result = traduction.toString()
                        .replace("\\n", "\n")
                        .replace("\\\"", "\"")
                        .replace("\\\\", "\\");
                System.out.println("Traduction extraite avec regex: " + result);
                return result;
            }

            // Derni√®re tentative avec split am√©lior√©
            if (jsonResponse.contains("[[\"")) {
                String[] parts = jsonResponse.split("\\[\\[\\[\"");
                if (parts.length > 1) {
                    String[] subParts = parts[1].split("\"");
                    if (subParts.length > 0) {
                        String result = subParts[0].replace("\\n", "\n");
                        System.out.println("Traduction extraite avec split: " + result);
                        return result;
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("Erreur lors de l'extraction de la traduction: " + e.getMessage());
            e.printStackTrace();
        }

        return "Erreur lors de l'extraction de la traduction";
    }

    private String detecterLangueAvecGoogle(String texte) throws Exception {
        String url = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q="
                + URLEncoder.encode(texte.substring(0, Math.min(100, texte.length())), "UTF-8");

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", "Mozilla/5.0");
        connection.setConnectTimeout(5000);
        connection.setReadTimeout(5000);

        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();

        // Extraction am√©lior√©e de la langue d√©tect√©e
        String jsonResponse = response.toString();
        Pattern langPattern = Pattern.compile("\"([a-z]{2})\"(?=,null,null,)");
        Matcher matcher = langPattern.matcher(jsonResponse);

        if (matcher.find()) {
            return matcher.group(1);
        }

        // Fallback
        return detecterLangueSimple(texte);
    }

    /**
     * Inverser les langues source et destination
     */
    private void inverserLangues() {
        // V√©rifier qu'il y a du contenu √† inverser
        String texteSource = zoneTexteSource.getText().trim();
        String traduction = zoneTexteDestination.getText().trim();

        if (texteSource.isEmpty() || traduction.isEmpty()) {
            // Afficher un message temporaire si pas de contenu
            String titreOriginal = getTitle();
            setTitle("‚ö†Ô∏è Rien √† inverser - Traduisez d'abord du texte");

            Timer timer = new Timer(2000, e -> setTitle(titreOriginal));
            timer.setRepeats(false);
            timer.start();
            return;
        }

        // Obtenir les langues actuelles
        String langueSourceActuelle = (String) comboLangueSource.getSelectedItem();
        String langueDestinationActuelle = (String) comboLangueDestination.getSelectedItem();

        // Si la langue source √©tait en d√©tection automatique, utiliser la langue d√©tect√©e
        if (langueSourceActuelle.equals("D√©tection automatique")) {
            langueSourceActuelle = obtenirNomLangue(derniereLangueSourceDetectee);
        }

        // Inverser : mettre la traduction dans la zone source
        zoneTexteSource.setText(traduction);

        // Inverser les s√©lecteurs de langues
        comboLangueSource.setSelectedItem(langueDestinationActuelle);
        comboLangueDestination.setSelectedItem(langueSourceActuelle);

        // Vider la zone de destination (elle se remplira automatiquement)
        zoneTexteDestination.setText("");
        labelLangueDetectee.setText("Langue s√©lectionn√©e : " + langueDestinationActuelle);

        // Feedback visuel
        String titreOriginal = getTitle();
        setTitle("üîÑ Langues invers√©es !");

        Timer timer = new Timer(1500, e -> setTitle(titreOriginal));
        timer.setRepeats(false);
        timer.start();

        System.out.println("Inversion: " + langueDestinationActuelle + " -> " + langueSourceActuelle);
    }

    private String obtenirNomLangue(String codeLangue) {
        for (Map.Entry<String, String> entry : langues.entrySet()) {
            if (entry.getValue().equals(codeLangue)) {
                return entry.getKey();
            }
        }
        return codeLangue.toUpperCase();
    }

    private void copierTraduction() {
        String traduction = zoneTexteDestination.getText();
        if (!traduction.trim().isEmpty()) {
            ignorerProchainClipboard = true;

            StringSelection stringSelection = new StringSelection(traduction);
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);

            dernierTexteClipboard = traduction;

            String titreOriginal = getTitle();
            setTitle("‚úÖ Traduction copi√©e!");

            Timer timer = new Timer(2000, e -> setTitle(titreOriginal));
            timer.setRepeats(false);
            timer.start();

            System.out.println("Traduction copi√©e: " + traduction.substring(0, Math.min(50, traduction.length())) + "...");
        }
    }

    private void creerDossierLogs() {
        try {
            Files.createDirectories(Paths.get("logs"));
            System.out.println("Dossier de logs cr√©√©/v√©rifi√©: logs/");
        } catch (Exception e) {
            System.err.println("Erreur lors de la cr√©ation du dossier logs: " + e.getMessage());
        }
    }

    private void enregistrerTraduction(String texteSource, String traduction, String langueSource, String langueDestination) {
        try {
            LocalDateTime maintenant = LocalDateTime.now();
            String jourActuel = maintenant.format(FORMAT_FICHIER);
            String timestamp = maintenant.format(FORMAT_TIMESTAMP);

            String nomFichier = "logs/traductions_" + jourActuel + ".csv";

            boolean nouveauFichier = !jourActuel.equals(dernierJourFichier);
            dernierJourFichier = jourActuel;

            String texteSourceEchappe = echapperCSV(texteSource);
            String traductionEchappee = echapperCSV(traduction);
            String langueSourceNom = obtenirNomLangue(langueSource);
            String langueDestinationNom = obtenirNomLangue(langueDestination);

            StringBuilder ligne = new StringBuilder();
            ligne.append("\"").append(timestamp).append("\",");
            ligne.append("\"").append(texteSourceEchappe).append("\",");
            ligne.append("\"").append(traductionEchappee).append("\",");
            ligne.append("\"").append(langueSourceNom).append("\",");
            ligne.append("\"").append(langueDestinationNom).append("\"");
            ligne.append(System.lineSeparator());

            if (nouveauFichier && !Files.exists(Paths.get(nomFichier))) {
                String entete = "\"Timestamp\",\"Texte Source\",\"Traduction\",\"Langue Source\",\"Langue Destination\"" + System.lineSeparator();
                Files.write(Paths.get(nomFichier), entete.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
                System.out.println("Nouveau fichier de logs cr√©√©: " + nomFichier);
            }

            Files.write(Paths.get(nomFichier), ligne.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
            System.out.println("Traduction enregistr√©e dans: " + nomFichier);

        } catch (Exception e) {
            System.err.println("Erreur lors de l'enregistrement des logs: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String echapperCSV(String texte) {
        if (texte == null) return "";

        String resultat = texte.replace("\"", "\"\"");
        resultat = resultat.replace("\n", " ").replace("\r", " ");

        if (resultat.length() > 1000) {
            resultat = resultat.substring(0, 997) + "...";
        }

        return resultat;
    }

    private void arreterApplication() {
        System.out.println("Arr√™t des services en cours...");

        if (timerSurveillance != null) {
            timerSurveillance.stop();
            timerSurveillance = null;
            System.out.println("Timer de surveillance arr√™t√©");
        }

        if (timerTraductionDelai != null) {
            timerTraductionDelai.stop();
            timerTraductionDelai = null;
            System.out.println("Timer de traduction arr√™t√©");
        }

        System.out.println("Application ferm√©e proprement");
    }

    public static void main(String[] args) {
        // Configurer le Look and Feel avant de cr√©er l'interface
        try {
            // Activer les propri√©t√©s syst√®me pour FlatLaf
            System.setProperty("flatlaf.useWindowDecorations", "true");
            System.setProperty("flatlaf.menuBarEmbedded", "true");

            // Utiliser le th√®me sombre par d√©faut
            UIManager.setLookAndFeel(new FlatIntelliJLaf());

            // Configuration des couleurs personnalis√©es
            UIManager.put("Button.arc", 8);
            UIManager.put("Component.arc", 8);
            UIManager.put("TextComponent.arc", 8);
            UIManager.put("ScrollBar.thumbArc", 6);
            UIManager.put("ScrollBar.thumbInsets", new Insets(2, 2, 2, 2));

        } catch (Exception e) {
            System.err.println("Impossible d'initialiser FlatLaf, utilisation du th√®me par d√©faut: " + e.getMessage());
            try {
                // Utiliser le Look and Feel syst√®me par d√©faut
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (Exception ex) {
                System.err.println("Impossible d'initialiser le th√®me syst√®me: " + ex.getMessage());
                // Garder le Look and Feel par d√©faut de Java
            }
        }

        // Cr√©er et afficher l'interface utilisateur
        SwingUtilities.invokeLater(() -> {
            try {
                new TraducteurAutomatique().setVisible(true);
                System.out.println("Application Swing lanc√©e avec succ√®s!");
            } catch (Exception e) {
                System.err.println("Erreur lors du lancement de l'application: " + e.getMessage());
                e.printStackTrace();
            }
        });
    }
}