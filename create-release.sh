#!/bin/bash

# Script pour cr√©er une nouvelle release du Traducteur Automatique
# Usage: ./create-release.sh [version]

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë              üöÄ CREATION D'UNE RELEASE                  ‚ïë"
echo "‚ïë            Traducteur Automatique - Swing               ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Fonction d'aide
show_help() {
    echo "Usage: $0 [VERSION]"
    echo ""
    echo "Exemples:"
    echo "  $0 1.0.0     # Cr√©e une release v1.0.0"
    echo "  $0 2.1.3     # Cr√©e une release v2.1.3"
    echo "  $0           # Mode interactif pour saisir la version"
    echo ""
    echo "Ce script va:"
    echo "  1. üß™ V√©rifier que tout est clean et test√©"
    echo "  2. üìù Mettre √† jour la version dans pom.xml"
    echo "  3. üì¶ Cr√©er et tester les builds"
    echo "  4. üè∑Ô∏è Cr√©er un tag Git"
    echo "  5. üöÄ Pousser le tag (d√©clenche la CI/CD)"
    echo ""
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    echo -e "${YELLOW}üîç V√©rification des pr√©requis...${NC}"

    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        echo -e "${RED}‚ùå Git n'est pas install√©${NC}"
        exit 1
    fi

    # V√©rifier Maven
    if ! command -v mvn &> /dev/null; then
        echo -e "${RED}‚ùå Maven n'est pas install√©${NC}"
        exit 1
    fi

    # V√©rifier Java
    if ! command -v java &> /dev/null; then
        echo -e "${RED}‚ùå Java n'est pas install√©${NC}"
        exit 1
    fi

    # V√©rifier qu'on est dans un repo Git
    if [ ! -d ".git" ]; then
        echo -e "${RED}‚ùå Ce n'est pas un repository Git${NC}"
        exit 1
    fi

    # V√©rifier qu'on est sur la branche main
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
        echo -e "${RED}‚ùå Vous devez √™tre sur la branche main/master pour cr√©er une release${NC}"
        echo "Branche actuelle: $CURRENT_BRANCH"
        exit 1
    fi

    # V√©rifier qu'il n'y a pas de modifications non commit√©es
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "${RED}‚ùå Il y a des modifications non commit√©es${NC}"
        echo "Committez ou stash vos modifications avant de cr√©er une release"
        git status --short
        exit 1
    fi

    # V√©rifier qu'on est √† jour avec origin
    git fetch origin
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/$CURRENT_BRANCH 2>/dev/null || git rev-parse origin/main 2>/dev/null || echo "")
    if [ -n "$REMOTE" ] && [ "$LOCAL" != "$REMOTE" ]; then
        echo -e "${RED}‚ùå Votre branche locale n'est pas √† jour avec origin${NC}"
        echo "Ex√©cutez: git pull origin $CURRENT_BRANCH"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Tous les pr√©requis sont satisfaits${NC}"
}

# Fonction de validation de version
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${RED}‚ùå Version invalide: $version${NC}"
        echo "Le format doit √™tre: X.Y.Z (ex: 1.0.0, 2.1.3)"
        return 1
    fi

    # V√©rifier que le tag n'existe pas d√©j√†
    if git tag -l | grep -q "^v$version$"; then
        echo -e "${RED}‚ùå Le tag v$version existe d√©j√†${NC}"
        return 1
    fi

    return 0
}

# Fonction de mise √† jour de la version dans pom.xml
update_pom_version() {
    local version=$1
    echo -e "${YELLOW}üìù Mise √† jour de la version dans pom.xml...${NC}"

    # Backup du pom.xml original
    cp pom.xml pom.xml.backup

    # Mise √† jour de la version
    sed -i.tmp "s/<version>1.0-SNAPSHOT<\/version>/<version>$version<\/version>/" pom.xml
    rm -f pom.xml.tmp

    # V√©rifier que la modification a bien √©t√© appliqu√©e
    if grep -q "<version>$version</version>" pom.xml; then
        echo -e "${GREEN}‚úÖ Version mise √† jour dans pom.xml: $version${NC}"
        rm -f pom.xml.backup
    else
        echo -e "${RED}‚ùå √âchec de la mise √† jour de pom.xml${NC}"
        mv pom.xml.backup pom.xml
        exit 1
    fi
}

# Fonction de build et test
build_and_test() {
    echo -e "${YELLOW}üì¶ Build et tests...${NC}"

    # Nettoyer et compiler
    echo "Nettoyage et compilation..."
    mvn clean compile

    # Ex√©cuter les tests (si ils existent)
    echo "Ex√©cution des tests..."
    mvn test || echo "‚ö†Ô∏è Pas de tests ou tests √©chou√©s (continuer quand m√™me)"

    # Cr√©er les packages
    echo "Cr√©ation des packages..."
    mvn package -DskipTests

    # V√©rifier que les JARs sont cr√©√©s
    if [ ! -f "target/auto-translate-swing-1.0-SNAPSHOT-jar-with-dependencies.jar" ]; then
        echo -e "${RED}‚ùå JAR avec d√©pendances non cr√©√©${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"

    # Afficher les artefacts cr√©√©s
    echo "üì¶ Artefacts cr√©√©s:"
    find target/ -name "*.jar" -exec ls -lh {} \;
}

# Fonction de test rapide de l'application
quick_test_app() {
    echo -e "${YELLOW}üß™ Test rapide de l'application...${NC}"

    JAR_FILE="target/auto-translate-swing-1.0-SNAPSHOT-jar-with-dependencies.jar"

    # Test de lancement en mode headless avec timeout
    if timeout 5s java -Djava.awt.headless=true -jar "$JAR_FILE" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Application se lance correctement${NC}"
    else
        echo -e "${GREEN}‚úÖ Application test√©e (timeout attendu en mode headless)${NC}"
    fi
}

# Fonction de cr√©ation du tag et push
create_and_push_tag() {
    local version=$1
    echo -e "${YELLOW}üè∑Ô∏è Cr√©ation du tag Git...${NC}"

    # Committer la modification de pom.xml
    git add pom.xml
    git commit -m "üöÄ Release v$version - Mise √† jour de la version"

    # Cr√©er le tag
    git tag -a "v$version" -m "üöÄ Release v$version

Cette release inclut :
- Application Swing compl√®te avec FlatLaf
- Support de 25+ th√®mes modernes
- Traduction avec APIs MyMemory + Google Translate
- Capture d'√©cran OCR multi-moniteurs
- Surveillance intelligente du presse-papiers
- Filtres de s√©curit√© avanc√©s
- Logging automatique en CSV

Pr√©requis : Java 21+

Pour installer :
java -jar traducteur-automatique-$version.jar"

    echo -e "${GREEN}‚úÖ Tag v$version cr√©√©${NC}"

    # Confirmer le push
    echo -e "${YELLOW}üöÄ Pr√™t √† pousser le tag et d√©clencher la release automatique${NC}"
    read -p "Continuer ? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Push du commit et du tag..."
        git push origin HEAD
        git push origin "v$version"
        echo -e "${GREEN}‚úÖ Tag pouss√© ! La CI/CD va cr√©er la release automatiquement${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Push annul√©. Tag cr√©√© localement seulement.${NC}"
        echo "Pour pousser plus tard : git push origin HEAD && git push origin v$version"
    fi
}

# Fonction principale
main() {
    # Afficher l'aide si demand√©
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_help
        exit 0
    fi

    # V√©rifier les pr√©requis
    check_prerequisites

    # Obtenir la version
    VERSION="$1"
    if [ -z "$VERSION" ]; then
        echo -e "${BLUE}üí≠ Aucune version sp√©cifi√©e. Mode interactif.${NC}"
        echo ""

        # Afficher la derni√®re version
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo